// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/inspire-manager/pkg/db/ent/goodordervaluepercent"
	"github.com/NpoolPlatform/inspire-manager/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// GoodOrderValuePercentUpdate is the builder for updating GoodOrderValuePercent entities.
type GoodOrderValuePercentUpdate struct {
	config
	hooks     []Hook
	mutation  *GoodOrderValuePercentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the GoodOrderValuePercentUpdate builder.
func (govpu *GoodOrderValuePercentUpdate) Where(ps ...predicate.GoodOrderValuePercent) *GoodOrderValuePercentUpdate {
	govpu.mutation.Where(ps...)
	return govpu
}

// SetCreatedAt sets the "created_at" field.
func (govpu *GoodOrderValuePercentUpdate) SetCreatedAt(u uint32) *GoodOrderValuePercentUpdate {
	govpu.mutation.ResetCreatedAt()
	govpu.mutation.SetCreatedAt(u)
	return govpu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (govpu *GoodOrderValuePercentUpdate) SetNillableCreatedAt(u *uint32) *GoodOrderValuePercentUpdate {
	if u != nil {
		govpu.SetCreatedAt(*u)
	}
	return govpu
}

// AddCreatedAt adds u to the "created_at" field.
func (govpu *GoodOrderValuePercentUpdate) AddCreatedAt(u int32) *GoodOrderValuePercentUpdate {
	govpu.mutation.AddCreatedAt(u)
	return govpu
}

// SetUpdatedAt sets the "updated_at" field.
func (govpu *GoodOrderValuePercentUpdate) SetUpdatedAt(u uint32) *GoodOrderValuePercentUpdate {
	govpu.mutation.ResetUpdatedAt()
	govpu.mutation.SetUpdatedAt(u)
	return govpu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (govpu *GoodOrderValuePercentUpdate) AddUpdatedAt(u int32) *GoodOrderValuePercentUpdate {
	govpu.mutation.AddUpdatedAt(u)
	return govpu
}

// SetDeletedAt sets the "deleted_at" field.
func (govpu *GoodOrderValuePercentUpdate) SetDeletedAt(u uint32) *GoodOrderValuePercentUpdate {
	govpu.mutation.ResetDeletedAt()
	govpu.mutation.SetDeletedAt(u)
	return govpu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (govpu *GoodOrderValuePercentUpdate) SetNillableDeletedAt(u *uint32) *GoodOrderValuePercentUpdate {
	if u != nil {
		govpu.SetDeletedAt(*u)
	}
	return govpu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (govpu *GoodOrderValuePercentUpdate) AddDeletedAt(u int32) *GoodOrderValuePercentUpdate {
	govpu.mutation.AddDeletedAt(u)
	return govpu
}

// SetAppID sets the "app_id" field.
func (govpu *GoodOrderValuePercentUpdate) SetAppID(u uuid.UUID) *GoodOrderValuePercentUpdate {
	govpu.mutation.SetAppID(u)
	return govpu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (govpu *GoodOrderValuePercentUpdate) SetNillableAppID(u *uuid.UUID) *GoodOrderValuePercentUpdate {
	if u != nil {
		govpu.SetAppID(*u)
	}
	return govpu
}

// ClearAppID clears the value of the "app_id" field.
func (govpu *GoodOrderValuePercentUpdate) ClearAppID() *GoodOrderValuePercentUpdate {
	govpu.mutation.ClearAppID()
	return govpu
}

// SetUserID sets the "user_id" field.
func (govpu *GoodOrderValuePercentUpdate) SetUserID(u uuid.UUID) *GoodOrderValuePercentUpdate {
	govpu.mutation.SetUserID(u)
	return govpu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (govpu *GoodOrderValuePercentUpdate) SetNillableUserID(u *uuid.UUID) *GoodOrderValuePercentUpdate {
	if u != nil {
		govpu.SetUserID(*u)
	}
	return govpu
}

// ClearUserID clears the value of the "user_id" field.
func (govpu *GoodOrderValuePercentUpdate) ClearUserID() *GoodOrderValuePercentUpdate {
	govpu.mutation.ClearUserID()
	return govpu
}

// SetGoodID sets the "good_id" field.
func (govpu *GoodOrderValuePercentUpdate) SetGoodID(u uuid.UUID) *GoodOrderValuePercentUpdate {
	govpu.mutation.SetGoodID(u)
	return govpu
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (govpu *GoodOrderValuePercentUpdate) SetNillableGoodID(u *uuid.UUID) *GoodOrderValuePercentUpdate {
	if u != nil {
		govpu.SetGoodID(*u)
	}
	return govpu
}

// ClearGoodID clears the value of the "good_id" field.
func (govpu *GoodOrderValuePercentUpdate) ClearGoodID() *GoodOrderValuePercentUpdate {
	govpu.mutation.ClearGoodID()
	return govpu
}

// SetPercent sets the "percent" field.
func (govpu *GoodOrderValuePercentUpdate) SetPercent(d decimal.Decimal) *GoodOrderValuePercentUpdate {
	govpu.mutation.SetPercent(d)
	return govpu
}

// SetNillablePercent sets the "percent" field if the given value is not nil.
func (govpu *GoodOrderValuePercentUpdate) SetNillablePercent(d *decimal.Decimal) *GoodOrderValuePercentUpdate {
	if d != nil {
		govpu.SetPercent(*d)
	}
	return govpu
}

// ClearPercent clears the value of the "percent" field.
func (govpu *GoodOrderValuePercentUpdate) ClearPercent() *GoodOrderValuePercentUpdate {
	govpu.mutation.ClearPercent()
	return govpu
}

// SetStartAt sets the "start_at" field.
func (govpu *GoodOrderValuePercentUpdate) SetStartAt(u uint32) *GoodOrderValuePercentUpdate {
	govpu.mutation.ResetStartAt()
	govpu.mutation.SetStartAt(u)
	return govpu
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (govpu *GoodOrderValuePercentUpdate) SetNillableStartAt(u *uint32) *GoodOrderValuePercentUpdate {
	if u != nil {
		govpu.SetStartAt(*u)
	}
	return govpu
}

// AddStartAt adds u to the "start_at" field.
func (govpu *GoodOrderValuePercentUpdate) AddStartAt(u int32) *GoodOrderValuePercentUpdate {
	govpu.mutation.AddStartAt(u)
	return govpu
}

// ClearStartAt clears the value of the "start_at" field.
func (govpu *GoodOrderValuePercentUpdate) ClearStartAt() *GoodOrderValuePercentUpdate {
	govpu.mutation.ClearStartAt()
	return govpu
}

// SetEndAt sets the "end_at" field.
func (govpu *GoodOrderValuePercentUpdate) SetEndAt(u uint32) *GoodOrderValuePercentUpdate {
	govpu.mutation.ResetEndAt()
	govpu.mutation.SetEndAt(u)
	return govpu
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (govpu *GoodOrderValuePercentUpdate) SetNillableEndAt(u *uint32) *GoodOrderValuePercentUpdate {
	if u != nil {
		govpu.SetEndAt(*u)
	}
	return govpu
}

// AddEndAt adds u to the "end_at" field.
func (govpu *GoodOrderValuePercentUpdate) AddEndAt(u int32) *GoodOrderValuePercentUpdate {
	govpu.mutation.AddEndAt(u)
	return govpu
}

// ClearEndAt clears the value of the "end_at" field.
func (govpu *GoodOrderValuePercentUpdate) ClearEndAt() *GoodOrderValuePercentUpdate {
	govpu.mutation.ClearEndAt()
	return govpu
}

// Mutation returns the GoodOrderValuePercentMutation object of the builder.
func (govpu *GoodOrderValuePercentUpdate) Mutation() *GoodOrderValuePercentMutation {
	return govpu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (govpu *GoodOrderValuePercentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := govpu.defaults(); err != nil {
		return 0, err
	}
	if len(govpu.hooks) == 0 {
		affected, err = govpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodOrderValuePercentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			govpu.mutation = mutation
			affected, err = govpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(govpu.hooks) - 1; i >= 0; i-- {
			if govpu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = govpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, govpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (govpu *GoodOrderValuePercentUpdate) SaveX(ctx context.Context) int {
	affected, err := govpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (govpu *GoodOrderValuePercentUpdate) Exec(ctx context.Context) error {
	_, err := govpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (govpu *GoodOrderValuePercentUpdate) ExecX(ctx context.Context) {
	if err := govpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (govpu *GoodOrderValuePercentUpdate) defaults() error {
	if _, ok := govpu.mutation.UpdatedAt(); !ok {
		if goodordervaluepercent.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized goodordervaluepercent.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := goodordervaluepercent.UpdateDefaultUpdatedAt()
		govpu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (govpu *GoodOrderValuePercentUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GoodOrderValuePercentUpdate {
	govpu.modifiers = append(govpu.modifiers, modifiers...)
	return govpu
}

func (govpu *GoodOrderValuePercentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodordervaluepercent.Table,
			Columns: goodordervaluepercent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: goodordervaluepercent.FieldID,
			},
		},
	}
	if ps := govpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := govpu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodordervaluepercent.FieldCreatedAt,
		})
	}
	if value, ok := govpu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodordervaluepercent.FieldCreatedAt,
		})
	}
	if value, ok := govpu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodordervaluepercent.FieldUpdatedAt,
		})
	}
	if value, ok := govpu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodordervaluepercent.FieldUpdatedAt,
		})
	}
	if value, ok := govpu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodordervaluepercent.FieldDeletedAt,
		})
	}
	if value, ok := govpu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodordervaluepercent.FieldDeletedAt,
		})
	}
	if value, ok := govpu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodordervaluepercent.FieldAppID,
		})
	}
	if govpu.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: goodordervaluepercent.FieldAppID,
		})
	}
	if value, ok := govpu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodordervaluepercent.FieldUserID,
		})
	}
	if govpu.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: goodordervaluepercent.FieldUserID,
		})
	}
	if value, ok := govpu.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodordervaluepercent.FieldGoodID,
		})
	}
	if govpu.mutation.GoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: goodordervaluepercent.FieldGoodID,
		})
	}
	if value, ok := govpu.mutation.Percent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: goodordervaluepercent.FieldPercent,
		})
	}
	if govpu.mutation.PercentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: goodordervaluepercent.FieldPercent,
		})
	}
	if value, ok := govpu.mutation.StartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodordervaluepercent.FieldStartAt,
		})
	}
	if value, ok := govpu.mutation.AddedStartAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodordervaluepercent.FieldStartAt,
		})
	}
	if govpu.mutation.StartAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: goodordervaluepercent.FieldStartAt,
		})
	}
	if value, ok := govpu.mutation.EndAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodordervaluepercent.FieldEndAt,
		})
	}
	if value, ok := govpu.mutation.AddedEndAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodordervaluepercent.FieldEndAt,
		})
	}
	if govpu.mutation.EndAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: goodordervaluepercent.FieldEndAt,
		})
	}
	_spec.Modifiers = govpu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, govpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodordervaluepercent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// GoodOrderValuePercentUpdateOne is the builder for updating a single GoodOrderValuePercent entity.
type GoodOrderValuePercentUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *GoodOrderValuePercentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (govpuo *GoodOrderValuePercentUpdateOne) SetCreatedAt(u uint32) *GoodOrderValuePercentUpdateOne {
	govpuo.mutation.ResetCreatedAt()
	govpuo.mutation.SetCreatedAt(u)
	return govpuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (govpuo *GoodOrderValuePercentUpdateOne) SetNillableCreatedAt(u *uint32) *GoodOrderValuePercentUpdateOne {
	if u != nil {
		govpuo.SetCreatedAt(*u)
	}
	return govpuo
}

// AddCreatedAt adds u to the "created_at" field.
func (govpuo *GoodOrderValuePercentUpdateOne) AddCreatedAt(u int32) *GoodOrderValuePercentUpdateOne {
	govpuo.mutation.AddCreatedAt(u)
	return govpuo
}

// SetUpdatedAt sets the "updated_at" field.
func (govpuo *GoodOrderValuePercentUpdateOne) SetUpdatedAt(u uint32) *GoodOrderValuePercentUpdateOne {
	govpuo.mutation.ResetUpdatedAt()
	govpuo.mutation.SetUpdatedAt(u)
	return govpuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (govpuo *GoodOrderValuePercentUpdateOne) AddUpdatedAt(u int32) *GoodOrderValuePercentUpdateOne {
	govpuo.mutation.AddUpdatedAt(u)
	return govpuo
}

// SetDeletedAt sets the "deleted_at" field.
func (govpuo *GoodOrderValuePercentUpdateOne) SetDeletedAt(u uint32) *GoodOrderValuePercentUpdateOne {
	govpuo.mutation.ResetDeletedAt()
	govpuo.mutation.SetDeletedAt(u)
	return govpuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (govpuo *GoodOrderValuePercentUpdateOne) SetNillableDeletedAt(u *uint32) *GoodOrderValuePercentUpdateOne {
	if u != nil {
		govpuo.SetDeletedAt(*u)
	}
	return govpuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (govpuo *GoodOrderValuePercentUpdateOne) AddDeletedAt(u int32) *GoodOrderValuePercentUpdateOne {
	govpuo.mutation.AddDeletedAt(u)
	return govpuo
}

// SetAppID sets the "app_id" field.
func (govpuo *GoodOrderValuePercentUpdateOne) SetAppID(u uuid.UUID) *GoodOrderValuePercentUpdateOne {
	govpuo.mutation.SetAppID(u)
	return govpuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (govpuo *GoodOrderValuePercentUpdateOne) SetNillableAppID(u *uuid.UUID) *GoodOrderValuePercentUpdateOne {
	if u != nil {
		govpuo.SetAppID(*u)
	}
	return govpuo
}

// ClearAppID clears the value of the "app_id" field.
func (govpuo *GoodOrderValuePercentUpdateOne) ClearAppID() *GoodOrderValuePercentUpdateOne {
	govpuo.mutation.ClearAppID()
	return govpuo
}

// SetUserID sets the "user_id" field.
func (govpuo *GoodOrderValuePercentUpdateOne) SetUserID(u uuid.UUID) *GoodOrderValuePercentUpdateOne {
	govpuo.mutation.SetUserID(u)
	return govpuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (govpuo *GoodOrderValuePercentUpdateOne) SetNillableUserID(u *uuid.UUID) *GoodOrderValuePercentUpdateOne {
	if u != nil {
		govpuo.SetUserID(*u)
	}
	return govpuo
}

// ClearUserID clears the value of the "user_id" field.
func (govpuo *GoodOrderValuePercentUpdateOne) ClearUserID() *GoodOrderValuePercentUpdateOne {
	govpuo.mutation.ClearUserID()
	return govpuo
}

// SetGoodID sets the "good_id" field.
func (govpuo *GoodOrderValuePercentUpdateOne) SetGoodID(u uuid.UUID) *GoodOrderValuePercentUpdateOne {
	govpuo.mutation.SetGoodID(u)
	return govpuo
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (govpuo *GoodOrderValuePercentUpdateOne) SetNillableGoodID(u *uuid.UUID) *GoodOrderValuePercentUpdateOne {
	if u != nil {
		govpuo.SetGoodID(*u)
	}
	return govpuo
}

// ClearGoodID clears the value of the "good_id" field.
func (govpuo *GoodOrderValuePercentUpdateOne) ClearGoodID() *GoodOrderValuePercentUpdateOne {
	govpuo.mutation.ClearGoodID()
	return govpuo
}

// SetPercent sets the "percent" field.
func (govpuo *GoodOrderValuePercentUpdateOne) SetPercent(d decimal.Decimal) *GoodOrderValuePercentUpdateOne {
	govpuo.mutation.SetPercent(d)
	return govpuo
}

// SetNillablePercent sets the "percent" field if the given value is not nil.
func (govpuo *GoodOrderValuePercentUpdateOne) SetNillablePercent(d *decimal.Decimal) *GoodOrderValuePercentUpdateOne {
	if d != nil {
		govpuo.SetPercent(*d)
	}
	return govpuo
}

// ClearPercent clears the value of the "percent" field.
func (govpuo *GoodOrderValuePercentUpdateOne) ClearPercent() *GoodOrderValuePercentUpdateOne {
	govpuo.mutation.ClearPercent()
	return govpuo
}

// SetStartAt sets the "start_at" field.
func (govpuo *GoodOrderValuePercentUpdateOne) SetStartAt(u uint32) *GoodOrderValuePercentUpdateOne {
	govpuo.mutation.ResetStartAt()
	govpuo.mutation.SetStartAt(u)
	return govpuo
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (govpuo *GoodOrderValuePercentUpdateOne) SetNillableStartAt(u *uint32) *GoodOrderValuePercentUpdateOne {
	if u != nil {
		govpuo.SetStartAt(*u)
	}
	return govpuo
}

// AddStartAt adds u to the "start_at" field.
func (govpuo *GoodOrderValuePercentUpdateOne) AddStartAt(u int32) *GoodOrderValuePercentUpdateOne {
	govpuo.mutation.AddStartAt(u)
	return govpuo
}

// ClearStartAt clears the value of the "start_at" field.
func (govpuo *GoodOrderValuePercentUpdateOne) ClearStartAt() *GoodOrderValuePercentUpdateOne {
	govpuo.mutation.ClearStartAt()
	return govpuo
}

// SetEndAt sets the "end_at" field.
func (govpuo *GoodOrderValuePercentUpdateOne) SetEndAt(u uint32) *GoodOrderValuePercentUpdateOne {
	govpuo.mutation.ResetEndAt()
	govpuo.mutation.SetEndAt(u)
	return govpuo
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (govpuo *GoodOrderValuePercentUpdateOne) SetNillableEndAt(u *uint32) *GoodOrderValuePercentUpdateOne {
	if u != nil {
		govpuo.SetEndAt(*u)
	}
	return govpuo
}

// AddEndAt adds u to the "end_at" field.
func (govpuo *GoodOrderValuePercentUpdateOne) AddEndAt(u int32) *GoodOrderValuePercentUpdateOne {
	govpuo.mutation.AddEndAt(u)
	return govpuo
}

// ClearEndAt clears the value of the "end_at" field.
func (govpuo *GoodOrderValuePercentUpdateOne) ClearEndAt() *GoodOrderValuePercentUpdateOne {
	govpuo.mutation.ClearEndAt()
	return govpuo
}

// Mutation returns the GoodOrderValuePercentMutation object of the builder.
func (govpuo *GoodOrderValuePercentUpdateOne) Mutation() *GoodOrderValuePercentMutation {
	return govpuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (govpuo *GoodOrderValuePercentUpdateOne) Select(field string, fields ...string) *GoodOrderValuePercentUpdateOne {
	govpuo.fields = append([]string{field}, fields...)
	return govpuo
}

// Save executes the query and returns the updated GoodOrderValuePercent entity.
func (govpuo *GoodOrderValuePercentUpdateOne) Save(ctx context.Context) (*GoodOrderValuePercent, error) {
	var (
		err  error
		node *GoodOrderValuePercent
	)
	if err := govpuo.defaults(); err != nil {
		return nil, err
	}
	if len(govpuo.hooks) == 0 {
		node, err = govpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodOrderValuePercentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			govpuo.mutation = mutation
			node, err = govpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(govpuo.hooks) - 1; i >= 0; i-- {
			if govpuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = govpuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, govpuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*GoodOrderValuePercent)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from GoodOrderValuePercentMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (govpuo *GoodOrderValuePercentUpdateOne) SaveX(ctx context.Context) *GoodOrderValuePercent {
	node, err := govpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (govpuo *GoodOrderValuePercentUpdateOne) Exec(ctx context.Context) error {
	_, err := govpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (govpuo *GoodOrderValuePercentUpdateOne) ExecX(ctx context.Context) {
	if err := govpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (govpuo *GoodOrderValuePercentUpdateOne) defaults() error {
	if _, ok := govpuo.mutation.UpdatedAt(); !ok {
		if goodordervaluepercent.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized goodordervaluepercent.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := goodordervaluepercent.UpdateDefaultUpdatedAt()
		govpuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (govpuo *GoodOrderValuePercentUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GoodOrderValuePercentUpdateOne {
	govpuo.modifiers = append(govpuo.modifiers, modifiers...)
	return govpuo
}

func (govpuo *GoodOrderValuePercentUpdateOne) sqlSave(ctx context.Context) (_node *GoodOrderValuePercent, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodordervaluepercent.Table,
			Columns: goodordervaluepercent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: goodordervaluepercent.FieldID,
			},
		},
	}
	id, ok := govpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GoodOrderValuePercent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := govpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, goodordervaluepercent.FieldID)
		for _, f := range fields {
			if !goodordervaluepercent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != goodordervaluepercent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := govpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := govpuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodordervaluepercent.FieldCreatedAt,
		})
	}
	if value, ok := govpuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodordervaluepercent.FieldCreatedAt,
		})
	}
	if value, ok := govpuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodordervaluepercent.FieldUpdatedAt,
		})
	}
	if value, ok := govpuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodordervaluepercent.FieldUpdatedAt,
		})
	}
	if value, ok := govpuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodordervaluepercent.FieldDeletedAt,
		})
	}
	if value, ok := govpuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodordervaluepercent.FieldDeletedAt,
		})
	}
	if value, ok := govpuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodordervaluepercent.FieldAppID,
		})
	}
	if govpuo.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: goodordervaluepercent.FieldAppID,
		})
	}
	if value, ok := govpuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodordervaluepercent.FieldUserID,
		})
	}
	if govpuo.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: goodordervaluepercent.FieldUserID,
		})
	}
	if value, ok := govpuo.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodordervaluepercent.FieldGoodID,
		})
	}
	if govpuo.mutation.GoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: goodordervaluepercent.FieldGoodID,
		})
	}
	if value, ok := govpuo.mutation.Percent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: goodordervaluepercent.FieldPercent,
		})
	}
	if govpuo.mutation.PercentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: goodordervaluepercent.FieldPercent,
		})
	}
	if value, ok := govpuo.mutation.StartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodordervaluepercent.FieldStartAt,
		})
	}
	if value, ok := govpuo.mutation.AddedStartAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodordervaluepercent.FieldStartAt,
		})
	}
	if govpuo.mutation.StartAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: goodordervaluepercent.FieldStartAt,
		})
	}
	if value, ok := govpuo.mutation.EndAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodordervaluepercent.FieldEndAt,
		})
	}
	if value, ok := govpuo.mutation.AddedEndAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodordervaluepercent.FieldEndAt,
		})
	}
	if govpuo.mutation.EndAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: goodordervaluepercent.FieldEndAt,
		})
	}
	_spec.Modifiers = govpuo.modifiers
	_node = &GoodOrderValuePercent{config: govpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, govpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodordervaluepercent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
