// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/inspire-manager/pkg/db/ent/goodordervaluepercent"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// GoodOrderValuePercent is the model entity for the GoodOrderValuePercent schema.
type GoodOrderValuePercent struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// GoodID holds the value of the "good_id" field.
	GoodID uuid.UUID `json:"good_id,omitempty"`
	// Percent holds the value of the "percent" field.
	Percent decimal.Decimal `json:"percent,omitempty"`
	// StartAt holds the value of the "start_at" field.
	StartAt uint32 `json:"start_at,omitempty"`
	// EndAt holds the value of the "end_at" field.
	EndAt uint32 `json:"end_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GoodOrderValuePercent) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case goodordervaluepercent.FieldPercent:
			values[i] = new(decimal.Decimal)
		case goodordervaluepercent.FieldCreatedAt, goodordervaluepercent.FieldUpdatedAt, goodordervaluepercent.FieldDeletedAt, goodordervaluepercent.FieldStartAt, goodordervaluepercent.FieldEndAt:
			values[i] = new(sql.NullInt64)
		case goodordervaluepercent.FieldID, goodordervaluepercent.FieldAppID, goodordervaluepercent.FieldUserID, goodordervaluepercent.FieldGoodID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type GoodOrderValuePercent", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GoodOrderValuePercent fields.
func (govp *GoodOrderValuePercent) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case goodordervaluepercent.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				govp.ID = *value
			}
		case goodordervaluepercent.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				govp.CreatedAt = uint32(value.Int64)
			}
		case goodordervaluepercent.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				govp.UpdatedAt = uint32(value.Int64)
			}
		case goodordervaluepercent.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				govp.DeletedAt = uint32(value.Int64)
			}
		case goodordervaluepercent.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				govp.AppID = *value
			}
		case goodordervaluepercent.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				govp.UserID = *value
			}
		case goodordervaluepercent.FieldGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field good_id", values[i])
			} else if value != nil {
				govp.GoodID = *value
			}
		case goodordervaluepercent.FieldPercent:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field percent", values[i])
			} else if value != nil {
				govp.Percent = *value
			}
		case goodordervaluepercent.FieldStartAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field start_at", values[i])
			} else if value.Valid {
				govp.StartAt = uint32(value.Int64)
			}
		case goodordervaluepercent.FieldEndAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field end_at", values[i])
			} else if value.Valid {
				govp.EndAt = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this GoodOrderValuePercent.
// Note that you need to call GoodOrderValuePercent.Unwrap() before calling this method if this GoodOrderValuePercent
// was returned from a transaction, and the transaction was committed or rolled back.
func (govp *GoodOrderValuePercent) Update() *GoodOrderValuePercentUpdateOne {
	return (&GoodOrderValuePercentClient{config: govp.config}).UpdateOne(govp)
}

// Unwrap unwraps the GoodOrderValuePercent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (govp *GoodOrderValuePercent) Unwrap() *GoodOrderValuePercent {
	_tx, ok := govp.config.driver.(*txDriver)
	if !ok {
		panic("ent: GoodOrderValuePercent is not a transactional entity")
	}
	govp.config.driver = _tx.drv
	return govp
}

// String implements the fmt.Stringer.
func (govp *GoodOrderValuePercent) String() string {
	var builder strings.Builder
	builder.WriteString("GoodOrderValuePercent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", govp.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", govp.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", govp.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", govp.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", govp.AppID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", govp.UserID))
	builder.WriteString(", ")
	builder.WriteString("good_id=")
	builder.WriteString(fmt.Sprintf("%v", govp.GoodID))
	builder.WriteString(", ")
	builder.WriteString("percent=")
	builder.WriteString(fmt.Sprintf("%v", govp.Percent))
	builder.WriteString(", ")
	builder.WriteString("start_at=")
	builder.WriteString(fmt.Sprintf("%v", govp.StartAt))
	builder.WriteString(", ")
	builder.WriteString("end_at=")
	builder.WriteString(fmt.Sprintf("%v", govp.EndAt))
	builder.WriteByte(')')
	return builder.String()
}

// GoodOrderValuePercents is a parsable slice of GoodOrderValuePercent.
type GoodOrderValuePercents []*GoodOrderValuePercent

func (govp GoodOrderValuePercents) config(cfg config) {
	for _i := range govp {
		govp[_i].config = cfg
	}
}
