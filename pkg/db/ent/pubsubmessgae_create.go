// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/inspire-manager/pkg/db/ent/pubsubmessgae"
	"github.com/google/uuid"
)

// PubsubMessgaeCreate is the builder for creating a PubsubMessgae entity.
type PubsubMessgaeCreate struct {
	config
	mutation *PubsubMessgaeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pmc *PubsubMessgaeCreate) SetCreatedAt(u uint32) *PubsubMessgaeCreate {
	pmc.mutation.SetCreatedAt(u)
	return pmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pmc *PubsubMessgaeCreate) SetNillableCreatedAt(u *uint32) *PubsubMessgaeCreate {
	if u != nil {
		pmc.SetCreatedAt(*u)
	}
	return pmc
}

// SetUpdatedAt sets the "updated_at" field.
func (pmc *PubsubMessgaeCreate) SetUpdatedAt(u uint32) *PubsubMessgaeCreate {
	pmc.mutation.SetUpdatedAt(u)
	return pmc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pmc *PubsubMessgaeCreate) SetNillableUpdatedAt(u *uint32) *PubsubMessgaeCreate {
	if u != nil {
		pmc.SetUpdatedAt(*u)
	}
	return pmc
}

// SetDeletedAt sets the "deleted_at" field.
func (pmc *PubsubMessgaeCreate) SetDeletedAt(u uint32) *PubsubMessgaeCreate {
	pmc.mutation.SetDeletedAt(u)
	return pmc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pmc *PubsubMessgaeCreate) SetNillableDeletedAt(u *uint32) *PubsubMessgaeCreate {
	if u != nil {
		pmc.SetDeletedAt(*u)
	}
	return pmc
}

// SetMessageID sets the "message_id" field.
func (pmc *PubsubMessgaeCreate) SetMessageID(s string) *PubsubMessgaeCreate {
	pmc.mutation.SetMessageID(s)
	return pmc
}

// SetSender sets the "sender" field.
func (pmc *PubsubMessgaeCreate) SetSender(s string) *PubsubMessgaeCreate {
	pmc.mutation.SetSender(s)
	return pmc
}

// SetBody sets the "body" field.
func (pmc *PubsubMessgaeCreate) SetBody(b []byte) *PubsubMessgaeCreate {
	pmc.mutation.SetBody(b)
	return pmc
}

// SetState sets the "state" field.
func (pmc *PubsubMessgaeCreate) SetState(s string) *PubsubMessgaeCreate {
	pmc.mutation.SetState(s)
	return pmc
}

// SetResponseID sets the "response_id" field.
func (pmc *PubsubMessgaeCreate) SetResponseID(u uuid.UUID) *PubsubMessgaeCreate {
	pmc.mutation.SetResponseID(u)
	return pmc
}

// SetErrorMessage sets the "error_message" field.
func (pmc *PubsubMessgaeCreate) SetErrorMessage(s string) *PubsubMessgaeCreate {
	pmc.mutation.SetErrorMessage(s)
	return pmc
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (pmc *PubsubMessgaeCreate) SetNillableErrorMessage(s *string) *PubsubMessgaeCreate {
	if s != nil {
		pmc.SetErrorMessage(*s)
	}
	return pmc
}

// SetID sets the "id" field.
func (pmc *PubsubMessgaeCreate) SetID(u uuid.UUID) *PubsubMessgaeCreate {
	pmc.mutation.SetID(u)
	return pmc
}

// Mutation returns the PubsubMessgaeMutation object of the builder.
func (pmc *PubsubMessgaeCreate) Mutation() *PubsubMessgaeMutation {
	return pmc.mutation
}

// Save creates the PubsubMessgae in the database.
func (pmc *PubsubMessgaeCreate) Save(ctx context.Context) (*PubsubMessgae, error) {
	var (
		err  error
		node *PubsubMessgae
	)
	if err := pmc.defaults(); err != nil {
		return nil, err
	}
	if len(pmc.hooks) == 0 {
		if err = pmc.check(); err != nil {
			return nil, err
		}
		node, err = pmc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PubsubMessgaeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pmc.check(); err != nil {
				return nil, err
			}
			pmc.mutation = mutation
			if node, err = pmc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pmc.hooks) - 1; i >= 0; i-- {
			if pmc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pmc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pmc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*PubsubMessgae)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PubsubMessgaeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pmc *PubsubMessgaeCreate) SaveX(ctx context.Context) *PubsubMessgae {
	v, err := pmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pmc *PubsubMessgaeCreate) Exec(ctx context.Context) error {
	_, err := pmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmc *PubsubMessgaeCreate) ExecX(ctx context.Context) {
	if err := pmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pmc *PubsubMessgaeCreate) defaults() error {
	if _, ok := pmc.mutation.CreatedAt(); !ok {
		if pubsubmessgae.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized pubsubmessgae.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := pubsubmessgae.DefaultCreatedAt()
		pmc.mutation.SetCreatedAt(v)
	}
	if _, ok := pmc.mutation.UpdatedAt(); !ok {
		if pubsubmessgae.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized pubsubmessgae.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := pubsubmessgae.DefaultUpdatedAt()
		pmc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pmc.mutation.DeletedAt(); !ok {
		if pubsubmessgae.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized pubsubmessgae.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := pubsubmessgae.DefaultDeletedAt()
		pmc.mutation.SetDeletedAt(v)
	}
	if _, ok := pmc.mutation.ErrorMessage(); !ok {
		v := pubsubmessgae.DefaultErrorMessage
		pmc.mutation.SetErrorMessage(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pmc *PubsubMessgaeCreate) check() error {
	if _, ok := pmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PubsubMessgae.created_at"`)}
	}
	if _, ok := pmc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PubsubMessgae.updated_at"`)}
	}
	if _, ok := pmc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "PubsubMessgae.deleted_at"`)}
	}
	if _, ok := pmc.mutation.MessageID(); !ok {
		return &ValidationError{Name: "message_id", err: errors.New(`ent: missing required field "PubsubMessgae.message_id"`)}
	}
	if _, ok := pmc.mutation.Sender(); !ok {
		return &ValidationError{Name: "sender", err: errors.New(`ent: missing required field "PubsubMessgae.sender"`)}
	}
	if _, ok := pmc.mutation.Body(); !ok {
		return &ValidationError{Name: "body", err: errors.New(`ent: missing required field "PubsubMessgae.body"`)}
	}
	if _, ok := pmc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "PubsubMessgae.state"`)}
	}
	if _, ok := pmc.mutation.ResponseID(); !ok {
		return &ValidationError{Name: "response_id", err: errors.New(`ent: missing required field "PubsubMessgae.response_id"`)}
	}
	return nil
}

func (pmc *PubsubMessgaeCreate) sqlSave(ctx context.Context) (*PubsubMessgae, error) {
	_node, _spec := pmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (pmc *PubsubMessgaeCreate) createSpec() (*PubsubMessgae, *sqlgraph.CreateSpec) {
	var (
		_node = &PubsubMessgae{config: pmc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: pubsubmessgae.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: pubsubmessgae.FieldID,
			},
		}
	)
	_spec.OnConflict = pmc.conflict
	if id, ok := pmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pmc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: pubsubmessgae.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := pmc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: pubsubmessgae.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := pmc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: pubsubmessgae.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := pmc.mutation.MessageID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pubsubmessgae.FieldMessageID,
		})
		_node.MessageID = value
	}
	if value, ok := pmc.mutation.Sender(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pubsubmessgae.FieldSender,
		})
		_node.Sender = value
	}
	if value, ok := pmc.mutation.Body(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: pubsubmessgae.FieldBody,
		})
		_node.Body = value
	}
	if value, ok := pmc.mutation.State(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pubsubmessgae.FieldState,
		})
		_node.State = value
	}
	if value, ok := pmc.mutation.ResponseID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: pubsubmessgae.FieldResponseID,
		})
		_node.ResponseID = value
	}
	if value, ok := pmc.mutation.ErrorMessage(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pubsubmessgae.FieldErrorMessage,
		})
		_node.ErrorMessage = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PubsubMessgae.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PubsubMessgaeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (pmc *PubsubMessgaeCreate) OnConflict(opts ...sql.ConflictOption) *PubsubMessgaeUpsertOne {
	pmc.conflict = opts
	return &PubsubMessgaeUpsertOne{
		create: pmc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PubsubMessgae.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pmc *PubsubMessgaeCreate) OnConflictColumns(columns ...string) *PubsubMessgaeUpsertOne {
	pmc.conflict = append(pmc.conflict, sql.ConflictColumns(columns...))
	return &PubsubMessgaeUpsertOne{
		create: pmc,
	}
}

type (
	// PubsubMessgaeUpsertOne is the builder for "upsert"-ing
	//  one PubsubMessgae node.
	PubsubMessgaeUpsertOne struct {
		create *PubsubMessgaeCreate
	}

	// PubsubMessgaeUpsert is the "OnConflict" setter.
	PubsubMessgaeUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *PubsubMessgaeUpsert) SetCreatedAt(v uint32) *PubsubMessgaeUpsert {
	u.Set(pubsubmessgae.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PubsubMessgaeUpsert) UpdateCreatedAt() *PubsubMessgaeUpsert {
	u.SetExcluded(pubsubmessgae.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *PubsubMessgaeUpsert) AddCreatedAt(v uint32) *PubsubMessgaeUpsert {
	u.Add(pubsubmessgae.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PubsubMessgaeUpsert) SetUpdatedAt(v uint32) *PubsubMessgaeUpsert {
	u.Set(pubsubmessgae.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PubsubMessgaeUpsert) UpdateUpdatedAt() *PubsubMessgaeUpsert {
	u.SetExcluded(pubsubmessgae.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PubsubMessgaeUpsert) AddUpdatedAt(v uint32) *PubsubMessgaeUpsert {
	u.Add(pubsubmessgae.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PubsubMessgaeUpsert) SetDeletedAt(v uint32) *PubsubMessgaeUpsert {
	u.Set(pubsubmessgae.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PubsubMessgaeUpsert) UpdateDeletedAt() *PubsubMessgaeUpsert {
	u.SetExcluded(pubsubmessgae.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PubsubMessgaeUpsert) AddDeletedAt(v uint32) *PubsubMessgaeUpsert {
	u.Add(pubsubmessgae.FieldDeletedAt, v)
	return u
}

// SetMessageID sets the "message_id" field.
func (u *PubsubMessgaeUpsert) SetMessageID(v string) *PubsubMessgaeUpsert {
	u.Set(pubsubmessgae.FieldMessageID, v)
	return u
}

// UpdateMessageID sets the "message_id" field to the value that was provided on create.
func (u *PubsubMessgaeUpsert) UpdateMessageID() *PubsubMessgaeUpsert {
	u.SetExcluded(pubsubmessgae.FieldMessageID)
	return u
}

// SetSender sets the "sender" field.
func (u *PubsubMessgaeUpsert) SetSender(v string) *PubsubMessgaeUpsert {
	u.Set(pubsubmessgae.FieldSender, v)
	return u
}

// UpdateSender sets the "sender" field to the value that was provided on create.
func (u *PubsubMessgaeUpsert) UpdateSender() *PubsubMessgaeUpsert {
	u.SetExcluded(pubsubmessgae.FieldSender)
	return u
}

// SetBody sets the "body" field.
func (u *PubsubMessgaeUpsert) SetBody(v []byte) *PubsubMessgaeUpsert {
	u.Set(pubsubmessgae.FieldBody, v)
	return u
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *PubsubMessgaeUpsert) UpdateBody() *PubsubMessgaeUpsert {
	u.SetExcluded(pubsubmessgae.FieldBody)
	return u
}

// SetState sets the "state" field.
func (u *PubsubMessgaeUpsert) SetState(v string) *PubsubMessgaeUpsert {
	u.Set(pubsubmessgae.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *PubsubMessgaeUpsert) UpdateState() *PubsubMessgaeUpsert {
	u.SetExcluded(pubsubmessgae.FieldState)
	return u
}

// SetResponseID sets the "response_id" field.
func (u *PubsubMessgaeUpsert) SetResponseID(v uuid.UUID) *PubsubMessgaeUpsert {
	u.Set(pubsubmessgae.FieldResponseID, v)
	return u
}

// UpdateResponseID sets the "response_id" field to the value that was provided on create.
func (u *PubsubMessgaeUpsert) UpdateResponseID() *PubsubMessgaeUpsert {
	u.SetExcluded(pubsubmessgae.FieldResponseID)
	return u
}

// SetErrorMessage sets the "error_message" field.
func (u *PubsubMessgaeUpsert) SetErrorMessage(v string) *PubsubMessgaeUpsert {
	u.Set(pubsubmessgae.FieldErrorMessage, v)
	return u
}

// UpdateErrorMessage sets the "error_message" field to the value that was provided on create.
func (u *PubsubMessgaeUpsert) UpdateErrorMessage() *PubsubMessgaeUpsert {
	u.SetExcluded(pubsubmessgae.FieldErrorMessage)
	return u
}

// ClearErrorMessage clears the value of the "error_message" field.
func (u *PubsubMessgaeUpsert) ClearErrorMessage() *PubsubMessgaeUpsert {
	u.SetNull(pubsubmessgae.FieldErrorMessage)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PubsubMessgae.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(pubsubmessgae.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *PubsubMessgaeUpsertOne) UpdateNewValues() *PubsubMessgaeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(pubsubmessgae.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.PubsubMessgae.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *PubsubMessgaeUpsertOne) Ignore() *PubsubMessgaeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PubsubMessgaeUpsertOne) DoNothing() *PubsubMessgaeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PubsubMessgaeCreate.OnConflict
// documentation for more info.
func (u *PubsubMessgaeUpsertOne) Update(set func(*PubsubMessgaeUpsert)) *PubsubMessgaeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PubsubMessgaeUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PubsubMessgaeUpsertOne) SetCreatedAt(v uint32) *PubsubMessgaeUpsertOne {
	return u.Update(func(s *PubsubMessgaeUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *PubsubMessgaeUpsertOne) AddCreatedAt(v uint32) *PubsubMessgaeUpsertOne {
	return u.Update(func(s *PubsubMessgaeUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PubsubMessgaeUpsertOne) UpdateCreatedAt() *PubsubMessgaeUpsertOne {
	return u.Update(func(s *PubsubMessgaeUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PubsubMessgaeUpsertOne) SetUpdatedAt(v uint32) *PubsubMessgaeUpsertOne {
	return u.Update(func(s *PubsubMessgaeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PubsubMessgaeUpsertOne) AddUpdatedAt(v uint32) *PubsubMessgaeUpsertOne {
	return u.Update(func(s *PubsubMessgaeUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PubsubMessgaeUpsertOne) UpdateUpdatedAt() *PubsubMessgaeUpsertOne {
	return u.Update(func(s *PubsubMessgaeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PubsubMessgaeUpsertOne) SetDeletedAt(v uint32) *PubsubMessgaeUpsertOne {
	return u.Update(func(s *PubsubMessgaeUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PubsubMessgaeUpsertOne) AddDeletedAt(v uint32) *PubsubMessgaeUpsertOne {
	return u.Update(func(s *PubsubMessgaeUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PubsubMessgaeUpsertOne) UpdateDeletedAt() *PubsubMessgaeUpsertOne {
	return u.Update(func(s *PubsubMessgaeUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetMessageID sets the "message_id" field.
func (u *PubsubMessgaeUpsertOne) SetMessageID(v string) *PubsubMessgaeUpsertOne {
	return u.Update(func(s *PubsubMessgaeUpsert) {
		s.SetMessageID(v)
	})
}

// UpdateMessageID sets the "message_id" field to the value that was provided on create.
func (u *PubsubMessgaeUpsertOne) UpdateMessageID() *PubsubMessgaeUpsertOne {
	return u.Update(func(s *PubsubMessgaeUpsert) {
		s.UpdateMessageID()
	})
}

// SetSender sets the "sender" field.
func (u *PubsubMessgaeUpsertOne) SetSender(v string) *PubsubMessgaeUpsertOne {
	return u.Update(func(s *PubsubMessgaeUpsert) {
		s.SetSender(v)
	})
}

// UpdateSender sets the "sender" field to the value that was provided on create.
func (u *PubsubMessgaeUpsertOne) UpdateSender() *PubsubMessgaeUpsertOne {
	return u.Update(func(s *PubsubMessgaeUpsert) {
		s.UpdateSender()
	})
}

// SetBody sets the "body" field.
func (u *PubsubMessgaeUpsertOne) SetBody(v []byte) *PubsubMessgaeUpsertOne {
	return u.Update(func(s *PubsubMessgaeUpsert) {
		s.SetBody(v)
	})
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *PubsubMessgaeUpsertOne) UpdateBody() *PubsubMessgaeUpsertOne {
	return u.Update(func(s *PubsubMessgaeUpsert) {
		s.UpdateBody()
	})
}

// SetState sets the "state" field.
func (u *PubsubMessgaeUpsertOne) SetState(v string) *PubsubMessgaeUpsertOne {
	return u.Update(func(s *PubsubMessgaeUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *PubsubMessgaeUpsertOne) UpdateState() *PubsubMessgaeUpsertOne {
	return u.Update(func(s *PubsubMessgaeUpsert) {
		s.UpdateState()
	})
}

// SetResponseID sets the "response_id" field.
func (u *PubsubMessgaeUpsertOne) SetResponseID(v uuid.UUID) *PubsubMessgaeUpsertOne {
	return u.Update(func(s *PubsubMessgaeUpsert) {
		s.SetResponseID(v)
	})
}

// UpdateResponseID sets the "response_id" field to the value that was provided on create.
func (u *PubsubMessgaeUpsertOne) UpdateResponseID() *PubsubMessgaeUpsertOne {
	return u.Update(func(s *PubsubMessgaeUpsert) {
		s.UpdateResponseID()
	})
}

// SetErrorMessage sets the "error_message" field.
func (u *PubsubMessgaeUpsertOne) SetErrorMessage(v string) *PubsubMessgaeUpsertOne {
	return u.Update(func(s *PubsubMessgaeUpsert) {
		s.SetErrorMessage(v)
	})
}

// UpdateErrorMessage sets the "error_message" field to the value that was provided on create.
func (u *PubsubMessgaeUpsertOne) UpdateErrorMessage() *PubsubMessgaeUpsertOne {
	return u.Update(func(s *PubsubMessgaeUpsert) {
		s.UpdateErrorMessage()
	})
}

// ClearErrorMessage clears the value of the "error_message" field.
func (u *PubsubMessgaeUpsertOne) ClearErrorMessage() *PubsubMessgaeUpsertOne {
	return u.Update(func(s *PubsubMessgaeUpsert) {
		s.ClearErrorMessage()
	})
}

// Exec executes the query.
func (u *PubsubMessgaeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PubsubMessgaeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PubsubMessgaeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PubsubMessgaeUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PubsubMessgaeUpsertOne.ID is not supported by MySQL driver. Use PubsubMessgaeUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PubsubMessgaeUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PubsubMessgaeCreateBulk is the builder for creating many PubsubMessgae entities in bulk.
type PubsubMessgaeCreateBulk struct {
	config
	builders []*PubsubMessgaeCreate
	conflict []sql.ConflictOption
}

// Save creates the PubsubMessgae entities in the database.
func (pmcb *PubsubMessgaeCreateBulk) Save(ctx context.Context) ([]*PubsubMessgae, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pmcb.builders))
	nodes := make([]*PubsubMessgae, len(pmcb.builders))
	mutators := make([]Mutator, len(pmcb.builders))
	for i := range pmcb.builders {
		func(i int, root context.Context) {
			builder := pmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PubsubMessgaeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pmcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pmcb *PubsubMessgaeCreateBulk) SaveX(ctx context.Context) []*PubsubMessgae {
	v, err := pmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pmcb *PubsubMessgaeCreateBulk) Exec(ctx context.Context) error {
	_, err := pmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmcb *PubsubMessgaeCreateBulk) ExecX(ctx context.Context) {
	if err := pmcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PubsubMessgae.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PubsubMessgaeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (pmcb *PubsubMessgaeCreateBulk) OnConflict(opts ...sql.ConflictOption) *PubsubMessgaeUpsertBulk {
	pmcb.conflict = opts
	return &PubsubMessgaeUpsertBulk{
		create: pmcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PubsubMessgae.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pmcb *PubsubMessgaeCreateBulk) OnConflictColumns(columns ...string) *PubsubMessgaeUpsertBulk {
	pmcb.conflict = append(pmcb.conflict, sql.ConflictColumns(columns...))
	return &PubsubMessgaeUpsertBulk{
		create: pmcb,
	}
}

// PubsubMessgaeUpsertBulk is the builder for "upsert"-ing
// a bulk of PubsubMessgae nodes.
type PubsubMessgaeUpsertBulk struct {
	create *PubsubMessgaeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PubsubMessgae.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(pubsubmessgae.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *PubsubMessgaeUpsertBulk) UpdateNewValues() *PubsubMessgaeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(pubsubmessgae.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PubsubMessgae.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *PubsubMessgaeUpsertBulk) Ignore() *PubsubMessgaeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PubsubMessgaeUpsertBulk) DoNothing() *PubsubMessgaeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PubsubMessgaeCreateBulk.OnConflict
// documentation for more info.
func (u *PubsubMessgaeUpsertBulk) Update(set func(*PubsubMessgaeUpsert)) *PubsubMessgaeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PubsubMessgaeUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PubsubMessgaeUpsertBulk) SetCreatedAt(v uint32) *PubsubMessgaeUpsertBulk {
	return u.Update(func(s *PubsubMessgaeUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *PubsubMessgaeUpsertBulk) AddCreatedAt(v uint32) *PubsubMessgaeUpsertBulk {
	return u.Update(func(s *PubsubMessgaeUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PubsubMessgaeUpsertBulk) UpdateCreatedAt() *PubsubMessgaeUpsertBulk {
	return u.Update(func(s *PubsubMessgaeUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PubsubMessgaeUpsertBulk) SetUpdatedAt(v uint32) *PubsubMessgaeUpsertBulk {
	return u.Update(func(s *PubsubMessgaeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PubsubMessgaeUpsertBulk) AddUpdatedAt(v uint32) *PubsubMessgaeUpsertBulk {
	return u.Update(func(s *PubsubMessgaeUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PubsubMessgaeUpsertBulk) UpdateUpdatedAt() *PubsubMessgaeUpsertBulk {
	return u.Update(func(s *PubsubMessgaeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PubsubMessgaeUpsertBulk) SetDeletedAt(v uint32) *PubsubMessgaeUpsertBulk {
	return u.Update(func(s *PubsubMessgaeUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PubsubMessgaeUpsertBulk) AddDeletedAt(v uint32) *PubsubMessgaeUpsertBulk {
	return u.Update(func(s *PubsubMessgaeUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PubsubMessgaeUpsertBulk) UpdateDeletedAt() *PubsubMessgaeUpsertBulk {
	return u.Update(func(s *PubsubMessgaeUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetMessageID sets the "message_id" field.
func (u *PubsubMessgaeUpsertBulk) SetMessageID(v string) *PubsubMessgaeUpsertBulk {
	return u.Update(func(s *PubsubMessgaeUpsert) {
		s.SetMessageID(v)
	})
}

// UpdateMessageID sets the "message_id" field to the value that was provided on create.
func (u *PubsubMessgaeUpsertBulk) UpdateMessageID() *PubsubMessgaeUpsertBulk {
	return u.Update(func(s *PubsubMessgaeUpsert) {
		s.UpdateMessageID()
	})
}

// SetSender sets the "sender" field.
func (u *PubsubMessgaeUpsertBulk) SetSender(v string) *PubsubMessgaeUpsertBulk {
	return u.Update(func(s *PubsubMessgaeUpsert) {
		s.SetSender(v)
	})
}

// UpdateSender sets the "sender" field to the value that was provided on create.
func (u *PubsubMessgaeUpsertBulk) UpdateSender() *PubsubMessgaeUpsertBulk {
	return u.Update(func(s *PubsubMessgaeUpsert) {
		s.UpdateSender()
	})
}

// SetBody sets the "body" field.
func (u *PubsubMessgaeUpsertBulk) SetBody(v []byte) *PubsubMessgaeUpsertBulk {
	return u.Update(func(s *PubsubMessgaeUpsert) {
		s.SetBody(v)
	})
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *PubsubMessgaeUpsertBulk) UpdateBody() *PubsubMessgaeUpsertBulk {
	return u.Update(func(s *PubsubMessgaeUpsert) {
		s.UpdateBody()
	})
}

// SetState sets the "state" field.
func (u *PubsubMessgaeUpsertBulk) SetState(v string) *PubsubMessgaeUpsertBulk {
	return u.Update(func(s *PubsubMessgaeUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *PubsubMessgaeUpsertBulk) UpdateState() *PubsubMessgaeUpsertBulk {
	return u.Update(func(s *PubsubMessgaeUpsert) {
		s.UpdateState()
	})
}

// SetResponseID sets the "response_id" field.
func (u *PubsubMessgaeUpsertBulk) SetResponseID(v uuid.UUID) *PubsubMessgaeUpsertBulk {
	return u.Update(func(s *PubsubMessgaeUpsert) {
		s.SetResponseID(v)
	})
}

// UpdateResponseID sets the "response_id" field to the value that was provided on create.
func (u *PubsubMessgaeUpsertBulk) UpdateResponseID() *PubsubMessgaeUpsertBulk {
	return u.Update(func(s *PubsubMessgaeUpsert) {
		s.UpdateResponseID()
	})
}

// SetErrorMessage sets the "error_message" field.
func (u *PubsubMessgaeUpsertBulk) SetErrorMessage(v string) *PubsubMessgaeUpsertBulk {
	return u.Update(func(s *PubsubMessgaeUpsert) {
		s.SetErrorMessage(v)
	})
}

// UpdateErrorMessage sets the "error_message" field to the value that was provided on create.
func (u *PubsubMessgaeUpsertBulk) UpdateErrorMessage() *PubsubMessgaeUpsertBulk {
	return u.Update(func(s *PubsubMessgaeUpsert) {
		s.UpdateErrorMessage()
	})
}

// ClearErrorMessage clears the value of the "error_message" field.
func (u *PubsubMessgaeUpsertBulk) ClearErrorMessage() *PubsubMessgaeUpsertBulk {
	return u.Update(func(s *PubsubMessgaeUpsert) {
		s.ClearErrorMessage()
	})
}

// Exec executes the query.
func (u *PubsubMessgaeUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PubsubMessgaeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PubsubMessgaeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PubsubMessgaeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
