// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/inspire-manager/pkg/db/ent/goodordervaluepercent"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// GoodOrderValuePercentCreate is the builder for creating a GoodOrderValuePercent entity.
type GoodOrderValuePercentCreate struct {
	config
	mutation *GoodOrderValuePercentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (govpc *GoodOrderValuePercentCreate) SetCreatedAt(u uint32) *GoodOrderValuePercentCreate {
	govpc.mutation.SetCreatedAt(u)
	return govpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (govpc *GoodOrderValuePercentCreate) SetNillableCreatedAt(u *uint32) *GoodOrderValuePercentCreate {
	if u != nil {
		govpc.SetCreatedAt(*u)
	}
	return govpc
}

// SetUpdatedAt sets the "updated_at" field.
func (govpc *GoodOrderValuePercentCreate) SetUpdatedAt(u uint32) *GoodOrderValuePercentCreate {
	govpc.mutation.SetUpdatedAt(u)
	return govpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (govpc *GoodOrderValuePercentCreate) SetNillableUpdatedAt(u *uint32) *GoodOrderValuePercentCreate {
	if u != nil {
		govpc.SetUpdatedAt(*u)
	}
	return govpc
}

// SetDeletedAt sets the "deleted_at" field.
func (govpc *GoodOrderValuePercentCreate) SetDeletedAt(u uint32) *GoodOrderValuePercentCreate {
	govpc.mutation.SetDeletedAt(u)
	return govpc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (govpc *GoodOrderValuePercentCreate) SetNillableDeletedAt(u *uint32) *GoodOrderValuePercentCreate {
	if u != nil {
		govpc.SetDeletedAt(*u)
	}
	return govpc
}

// SetAppID sets the "app_id" field.
func (govpc *GoodOrderValuePercentCreate) SetAppID(u uuid.UUID) *GoodOrderValuePercentCreate {
	govpc.mutation.SetAppID(u)
	return govpc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (govpc *GoodOrderValuePercentCreate) SetNillableAppID(u *uuid.UUID) *GoodOrderValuePercentCreate {
	if u != nil {
		govpc.SetAppID(*u)
	}
	return govpc
}

// SetUserID sets the "user_id" field.
func (govpc *GoodOrderValuePercentCreate) SetUserID(u uuid.UUID) *GoodOrderValuePercentCreate {
	govpc.mutation.SetUserID(u)
	return govpc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (govpc *GoodOrderValuePercentCreate) SetNillableUserID(u *uuid.UUID) *GoodOrderValuePercentCreate {
	if u != nil {
		govpc.SetUserID(*u)
	}
	return govpc
}

// SetGoodID sets the "good_id" field.
func (govpc *GoodOrderValuePercentCreate) SetGoodID(u uuid.UUID) *GoodOrderValuePercentCreate {
	govpc.mutation.SetGoodID(u)
	return govpc
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (govpc *GoodOrderValuePercentCreate) SetNillableGoodID(u *uuid.UUID) *GoodOrderValuePercentCreate {
	if u != nil {
		govpc.SetGoodID(*u)
	}
	return govpc
}

// SetPercent sets the "percent" field.
func (govpc *GoodOrderValuePercentCreate) SetPercent(d decimal.Decimal) *GoodOrderValuePercentCreate {
	govpc.mutation.SetPercent(d)
	return govpc
}

// SetNillablePercent sets the "percent" field if the given value is not nil.
func (govpc *GoodOrderValuePercentCreate) SetNillablePercent(d *decimal.Decimal) *GoodOrderValuePercentCreate {
	if d != nil {
		govpc.SetPercent(*d)
	}
	return govpc
}

// SetStartAt sets the "start_at" field.
func (govpc *GoodOrderValuePercentCreate) SetStartAt(u uint32) *GoodOrderValuePercentCreate {
	govpc.mutation.SetStartAt(u)
	return govpc
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (govpc *GoodOrderValuePercentCreate) SetNillableStartAt(u *uint32) *GoodOrderValuePercentCreate {
	if u != nil {
		govpc.SetStartAt(*u)
	}
	return govpc
}

// SetEndAt sets the "end_at" field.
func (govpc *GoodOrderValuePercentCreate) SetEndAt(u uint32) *GoodOrderValuePercentCreate {
	govpc.mutation.SetEndAt(u)
	return govpc
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (govpc *GoodOrderValuePercentCreate) SetNillableEndAt(u *uint32) *GoodOrderValuePercentCreate {
	if u != nil {
		govpc.SetEndAt(*u)
	}
	return govpc
}

// SetID sets the "id" field.
func (govpc *GoodOrderValuePercentCreate) SetID(u uuid.UUID) *GoodOrderValuePercentCreate {
	govpc.mutation.SetID(u)
	return govpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (govpc *GoodOrderValuePercentCreate) SetNillableID(u *uuid.UUID) *GoodOrderValuePercentCreate {
	if u != nil {
		govpc.SetID(*u)
	}
	return govpc
}

// Mutation returns the GoodOrderValuePercentMutation object of the builder.
func (govpc *GoodOrderValuePercentCreate) Mutation() *GoodOrderValuePercentMutation {
	return govpc.mutation
}

// Save creates the GoodOrderValuePercent in the database.
func (govpc *GoodOrderValuePercentCreate) Save(ctx context.Context) (*GoodOrderValuePercent, error) {
	var (
		err  error
		node *GoodOrderValuePercent
	)
	if err := govpc.defaults(); err != nil {
		return nil, err
	}
	if len(govpc.hooks) == 0 {
		if err = govpc.check(); err != nil {
			return nil, err
		}
		node, err = govpc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodOrderValuePercentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = govpc.check(); err != nil {
				return nil, err
			}
			govpc.mutation = mutation
			if node, err = govpc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(govpc.hooks) - 1; i >= 0; i-- {
			if govpc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = govpc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, govpc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*GoodOrderValuePercent)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from GoodOrderValuePercentMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (govpc *GoodOrderValuePercentCreate) SaveX(ctx context.Context) *GoodOrderValuePercent {
	v, err := govpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (govpc *GoodOrderValuePercentCreate) Exec(ctx context.Context) error {
	_, err := govpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (govpc *GoodOrderValuePercentCreate) ExecX(ctx context.Context) {
	if err := govpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (govpc *GoodOrderValuePercentCreate) defaults() error {
	if _, ok := govpc.mutation.CreatedAt(); !ok {
		if goodordervaluepercent.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized goodordervaluepercent.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := goodordervaluepercent.DefaultCreatedAt()
		govpc.mutation.SetCreatedAt(v)
	}
	if _, ok := govpc.mutation.UpdatedAt(); !ok {
		if goodordervaluepercent.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized goodordervaluepercent.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := goodordervaluepercent.DefaultUpdatedAt()
		govpc.mutation.SetUpdatedAt(v)
	}
	if _, ok := govpc.mutation.DeletedAt(); !ok {
		if goodordervaluepercent.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized goodordervaluepercent.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := goodordervaluepercent.DefaultDeletedAt()
		govpc.mutation.SetDeletedAt(v)
	}
	if _, ok := govpc.mutation.AppID(); !ok {
		if goodordervaluepercent.DefaultAppID == nil {
			return fmt.Errorf("ent: uninitialized goodordervaluepercent.DefaultAppID (forgotten import ent/runtime?)")
		}
		v := goodordervaluepercent.DefaultAppID()
		govpc.mutation.SetAppID(v)
	}
	if _, ok := govpc.mutation.UserID(); !ok {
		if goodordervaluepercent.DefaultUserID == nil {
			return fmt.Errorf("ent: uninitialized goodordervaluepercent.DefaultUserID (forgotten import ent/runtime?)")
		}
		v := goodordervaluepercent.DefaultUserID()
		govpc.mutation.SetUserID(v)
	}
	if _, ok := govpc.mutation.GoodID(); !ok {
		if goodordervaluepercent.DefaultGoodID == nil {
			return fmt.Errorf("ent: uninitialized goodordervaluepercent.DefaultGoodID (forgotten import ent/runtime?)")
		}
		v := goodordervaluepercent.DefaultGoodID()
		govpc.mutation.SetGoodID(v)
	}
	if _, ok := govpc.mutation.Percent(); !ok {
		v := goodordervaluepercent.DefaultPercent
		govpc.mutation.SetPercent(v)
	}
	if _, ok := govpc.mutation.StartAt(); !ok {
		v := goodordervaluepercent.DefaultStartAt
		govpc.mutation.SetStartAt(v)
	}
	if _, ok := govpc.mutation.EndAt(); !ok {
		v := goodordervaluepercent.DefaultEndAt
		govpc.mutation.SetEndAt(v)
	}
	if _, ok := govpc.mutation.ID(); !ok {
		if goodordervaluepercent.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized goodordervaluepercent.DefaultID (forgotten import ent/runtime?)")
		}
		v := goodordervaluepercent.DefaultID()
		govpc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (govpc *GoodOrderValuePercentCreate) check() error {
	if _, ok := govpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "GoodOrderValuePercent.created_at"`)}
	}
	if _, ok := govpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "GoodOrderValuePercent.updated_at"`)}
	}
	if _, ok := govpc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "GoodOrderValuePercent.deleted_at"`)}
	}
	return nil
}

func (govpc *GoodOrderValuePercentCreate) sqlSave(ctx context.Context) (*GoodOrderValuePercent, error) {
	_node, _spec := govpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, govpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (govpc *GoodOrderValuePercentCreate) createSpec() (*GoodOrderValuePercent, *sqlgraph.CreateSpec) {
	var (
		_node = &GoodOrderValuePercent{config: govpc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: goodordervaluepercent.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: goodordervaluepercent.FieldID,
			},
		}
	)
	_spec.OnConflict = govpc.conflict
	if id, ok := govpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := govpc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodordervaluepercent.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := govpc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodordervaluepercent.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := govpc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodordervaluepercent.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := govpc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodordervaluepercent.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := govpc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodordervaluepercent.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := govpc.mutation.GoodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodordervaluepercent.FieldGoodID,
		})
		_node.GoodID = value
	}
	if value, ok := govpc.mutation.Percent(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: goodordervaluepercent.FieldPercent,
		})
		_node.Percent = value
	}
	if value, ok := govpc.mutation.StartAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodordervaluepercent.FieldStartAt,
		})
		_node.StartAt = value
	}
	if value, ok := govpc.mutation.EndAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodordervaluepercent.FieldEndAt,
		})
		_node.EndAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GoodOrderValuePercent.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoodOrderValuePercentUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (govpc *GoodOrderValuePercentCreate) OnConflict(opts ...sql.ConflictOption) *GoodOrderValuePercentUpsertOne {
	govpc.conflict = opts
	return &GoodOrderValuePercentUpsertOne{
		create: govpc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GoodOrderValuePercent.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (govpc *GoodOrderValuePercentCreate) OnConflictColumns(columns ...string) *GoodOrderValuePercentUpsertOne {
	govpc.conflict = append(govpc.conflict, sql.ConflictColumns(columns...))
	return &GoodOrderValuePercentUpsertOne{
		create: govpc,
	}
}

type (
	// GoodOrderValuePercentUpsertOne is the builder for "upsert"-ing
	//  one GoodOrderValuePercent node.
	GoodOrderValuePercentUpsertOne struct {
		create *GoodOrderValuePercentCreate
	}

	// GoodOrderValuePercentUpsert is the "OnConflict" setter.
	GoodOrderValuePercentUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *GoodOrderValuePercentUpsert) SetCreatedAt(v uint32) *GoodOrderValuePercentUpsert {
	u.Set(goodordervaluepercent.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GoodOrderValuePercentUpsert) UpdateCreatedAt() *GoodOrderValuePercentUpsert {
	u.SetExcluded(goodordervaluepercent.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *GoodOrderValuePercentUpsert) AddCreatedAt(v uint32) *GoodOrderValuePercentUpsert {
	u.Add(goodordervaluepercent.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodOrderValuePercentUpsert) SetUpdatedAt(v uint32) *GoodOrderValuePercentUpsert {
	u.Set(goodordervaluepercent.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodOrderValuePercentUpsert) UpdateUpdatedAt() *GoodOrderValuePercentUpsert {
	u.SetExcluded(goodordervaluepercent.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *GoodOrderValuePercentUpsert) AddUpdatedAt(v uint32) *GoodOrderValuePercentUpsert {
	u.Add(goodordervaluepercent.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GoodOrderValuePercentUpsert) SetDeletedAt(v uint32) *GoodOrderValuePercentUpsert {
	u.Set(goodordervaluepercent.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GoodOrderValuePercentUpsert) UpdateDeletedAt() *GoodOrderValuePercentUpsert {
	u.SetExcluded(goodordervaluepercent.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *GoodOrderValuePercentUpsert) AddDeletedAt(v uint32) *GoodOrderValuePercentUpsert {
	u.Add(goodordervaluepercent.FieldDeletedAt, v)
	return u
}

// SetAppID sets the "app_id" field.
func (u *GoodOrderValuePercentUpsert) SetAppID(v uuid.UUID) *GoodOrderValuePercentUpsert {
	u.Set(goodordervaluepercent.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *GoodOrderValuePercentUpsert) UpdateAppID() *GoodOrderValuePercentUpsert {
	u.SetExcluded(goodordervaluepercent.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *GoodOrderValuePercentUpsert) ClearAppID() *GoodOrderValuePercentUpsert {
	u.SetNull(goodordervaluepercent.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *GoodOrderValuePercentUpsert) SetUserID(v uuid.UUID) *GoodOrderValuePercentUpsert {
	u.Set(goodordervaluepercent.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *GoodOrderValuePercentUpsert) UpdateUserID() *GoodOrderValuePercentUpsert {
	u.SetExcluded(goodordervaluepercent.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *GoodOrderValuePercentUpsert) ClearUserID() *GoodOrderValuePercentUpsert {
	u.SetNull(goodordervaluepercent.FieldUserID)
	return u
}

// SetGoodID sets the "good_id" field.
func (u *GoodOrderValuePercentUpsert) SetGoodID(v uuid.UUID) *GoodOrderValuePercentUpsert {
	u.Set(goodordervaluepercent.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *GoodOrderValuePercentUpsert) UpdateGoodID() *GoodOrderValuePercentUpsert {
	u.SetExcluded(goodordervaluepercent.FieldGoodID)
	return u
}

// ClearGoodID clears the value of the "good_id" field.
func (u *GoodOrderValuePercentUpsert) ClearGoodID() *GoodOrderValuePercentUpsert {
	u.SetNull(goodordervaluepercent.FieldGoodID)
	return u
}

// SetPercent sets the "percent" field.
func (u *GoodOrderValuePercentUpsert) SetPercent(v decimal.Decimal) *GoodOrderValuePercentUpsert {
	u.Set(goodordervaluepercent.FieldPercent, v)
	return u
}

// UpdatePercent sets the "percent" field to the value that was provided on create.
func (u *GoodOrderValuePercentUpsert) UpdatePercent() *GoodOrderValuePercentUpsert {
	u.SetExcluded(goodordervaluepercent.FieldPercent)
	return u
}

// ClearPercent clears the value of the "percent" field.
func (u *GoodOrderValuePercentUpsert) ClearPercent() *GoodOrderValuePercentUpsert {
	u.SetNull(goodordervaluepercent.FieldPercent)
	return u
}

// SetStartAt sets the "start_at" field.
func (u *GoodOrderValuePercentUpsert) SetStartAt(v uint32) *GoodOrderValuePercentUpsert {
	u.Set(goodordervaluepercent.FieldStartAt, v)
	return u
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *GoodOrderValuePercentUpsert) UpdateStartAt() *GoodOrderValuePercentUpsert {
	u.SetExcluded(goodordervaluepercent.FieldStartAt)
	return u
}

// AddStartAt adds v to the "start_at" field.
func (u *GoodOrderValuePercentUpsert) AddStartAt(v uint32) *GoodOrderValuePercentUpsert {
	u.Add(goodordervaluepercent.FieldStartAt, v)
	return u
}

// ClearStartAt clears the value of the "start_at" field.
func (u *GoodOrderValuePercentUpsert) ClearStartAt() *GoodOrderValuePercentUpsert {
	u.SetNull(goodordervaluepercent.FieldStartAt)
	return u
}

// SetEndAt sets the "end_at" field.
func (u *GoodOrderValuePercentUpsert) SetEndAt(v uint32) *GoodOrderValuePercentUpsert {
	u.Set(goodordervaluepercent.FieldEndAt, v)
	return u
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *GoodOrderValuePercentUpsert) UpdateEndAt() *GoodOrderValuePercentUpsert {
	u.SetExcluded(goodordervaluepercent.FieldEndAt)
	return u
}

// AddEndAt adds v to the "end_at" field.
func (u *GoodOrderValuePercentUpsert) AddEndAt(v uint32) *GoodOrderValuePercentUpsert {
	u.Add(goodordervaluepercent.FieldEndAt, v)
	return u
}

// ClearEndAt clears the value of the "end_at" field.
func (u *GoodOrderValuePercentUpsert) ClearEndAt() *GoodOrderValuePercentUpsert {
	u.SetNull(goodordervaluepercent.FieldEndAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.GoodOrderValuePercent.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(goodordervaluepercent.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *GoodOrderValuePercentUpsertOne) UpdateNewValues() *GoodOrderValuePercentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(goodordervaluepercent.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.GoodOrderValuePercent.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *GoodOrderValuePercentUpsertOne) Ignore() *GoodOrderValuePercentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoodOrderValuePercentUpsertOne) DoNothing() *GoodOrderValuePercentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoodOrderValuePercentCreate.OnConflict
// documentation for more info.
func (u *GoodOrderValuePercentUpsertOne) Update(set func(*GoodOrderValuePercentUpsert)) *GoodOrderValuePercentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoodOrderValuePercentUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *GoodOrderValuePercentUpsertOne) SetCreatedAt(v uint32) *GoodOrderValuePercentUpsertOne {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *GoodOrderValuePercentUpsertOne) AddCreatedAt(v uint32) *GoodOrderValuePercentUpsertOne {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GoodOrderValuePercentUpsertOne) UpdateCreatedAt() *GoodOrderValuePercentUpsertOne {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodOrderValuePercentUpsertOne) SetUpdatedAt(v uint32) *GoodOrderValuePercentUpsertOne {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *GoodOrderValuePercentUpsertOne) AddUpdatedAt(v uint32) *GoodOrderValuePercentUpsertOne {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodOrderValuePercentUpsertOne) UpdateUpdatedAt() *GoodOrderValuePercentUpsertOne {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GoodOrderValuePercentUpsertOne) SetDeletedAt(v uint32) *GoodOrderValuePercentUpsertOne {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *GoodOrderValuePercentUpsertOne) AddDeletedAt(v uint32) *GoodOrderValuePercentUpsertOne {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GoodOrderValuePercentUpsertOne) UpdateDeletedAt() *GoodOrderValuePercentUpsertOne {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *GoodOrderValuePercentUpsertOne) SetAppID(v uuid.UUID) *GoodOrderValuePercentUpsertOne {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *GoodOrderValuePercentUpsertOne) UpdateAppID() *GoodOrderValuePercentUpsertOne {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *GoodOrderValuePercentUpsertOne) ClearAppID() *GoodOrderValuePercentUpsertOne {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *GoodOrderValuePercentUpsertOne) SetUserID(v uuid.UUID) *GoodOrderValuePercentUpsertOne {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *GoodOrderValuePercentUpsertOne) UpdateUserID() *GoodOrderValuePercentUpsertOne {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *GoodOrderValuePercentUpsertOne) ClearUserID() *GoodOrderValuePercentUpsertOne {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.ClearUserID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *GoodOrderValuePercentUpsertOne) SetGoodID(v uuid.UUID) *GoodOrderValuePercentUpsertOne {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *GoodOrderValuePercentUpsertOne) UpdateGoodID() *GoodOrderValuePercentUpsertOne {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *GoodOrderValuePercentUpsertOne) ClearGoodID() *GoodOrderValuePercentUpsertOne {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.ClearGoodID()
	})
}

// SetPercent sets the "percent" field.
func (u *GoodOrderValuePercentUpsertOne) SetPercent(v decimal.Decimal) *GoodOrderValuePercentUpsertOne {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.SetPercent(v)
	})
}

// UpdatePercent sets the "percent" field to the value that was provided on create.
func (u *GoodOrderValuePercentUpsertOne) UpdatePercent() *GoodOrderValuePercentUpsertOne {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.UpdatePercent()
	})
}

// ClearPercent clears the value of the "percent" field.
func (u *GoodOrderValuePercentUpsertOne) ClearPercent() *GoodOrderValuePercentUpsertOne {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.ClearPercent()
	})
}

// SetStartAt sets the "start_at" field.
func (u *GoodOrderValuePercentUpsertOne) SetStartAt(v uint32) *GoodOrderValuePercentUpsertOne {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.SetStartAt(v)
	})
}

// AddStartAt adds v to the "start_at" field.
func (u *GoodOrderValuePercentUpsertOne) AddStartAt(v uint32) *GoodOrderValuePercentUpsertOne {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.AddStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *GoodOrderValuePercentUpsertOne) UpdateStartAt() *GoodOrderValuePercentUpsertOne {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *GoodOrderValuePercentUpsertOne) ClearStartAt() *GoodOrderValuePercentUpsertOne {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.ClearStartAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *GoodOrderValuePercentUpsertOne) SetEndAt(v uint32) *GoodOrderValuePercentUpsertOne {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.SetEndAt(v)
	})
}

// AddEndAt adds v to the "end_at" field.
func (u *GoodOrderValuePercentUpsertOne) AddEndAt(v uint32) *GoodOrderValuePercentUpsertOne {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.AddEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *GoodOrderValuePercentUpsertOne) UpdateEndAt() *GoodOrderValuePercentUpsertOne {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.UpdateEndAt()
	})
}

// ClearEndAt clears the value of the "end_at" field.
func (u *GoodOrderValuePercentUpsertOne) ClearEndAt() *GoodOrderValuePercentUpsertOne {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.ClearEndAt()
	})
}

// Exec executes the query.
func (u *GoodOrderValuePercentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GoodOrderValuePercentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoodOrderValuePercentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GoodOrderValuePercentUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: GoodOrderValuePercentUpsertOne.ID is not supported by MySQL driver. Use GoodOrderValuePercentUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GoodOrderValuePercentUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GoodOrderValuePercentCreateBulk is the builder for creating many GoodOrderValuePercent entities in bulk.
type GoodOrderValuePercentCreateBulk struct {
	config
	builders []*GoodOrderValuePercentCreate
	conflict []sql.ConflictOption
}

// Save creates the GoodOrderValuePercent entities in the database.
func (govpcb *GoodOrderValuePercentCreateBulk) Save(ctx context.Context) ([]*GoodOrderValuePercent, error) {
	specs := make([]*sqlgraph.CreateSpec, len(govpcb.builders))
	nodes := make([]*GoodOrderValuePercent, len(govpcb.builders))
	mutators := make([]Mutator, len(govpcb.builders))
	for i := range govpcb.builders {
		func(i int, root context.Context) {
			builder := govpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GoodOrderValuePercentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, govpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = govpcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, govpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, govpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (govpcb *GoodOrderValuePercentCreateBulk) SaveX(ctx context.Context) []*GoodOrderValuePercent {
	v, err := govpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (govpcb *GoodOrderValuePercentCreateBulk) Exec(ctx context.Context) error {
	_, err := govpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (govpcb *GoodOrderValuePercentCreateBulk) ExecX(ctx context.Context) {
	if err := govpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GoodOrderValuePercent.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoodOrderValuePercentUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (govpcb *GoodOrderValuePercentCreateBulk) OnConflict(opts ...sql.ConflictOption) *GoodOrderValuePercentUpsertBulk {
	govpcb.conflict = opts
	return &GoodOrderValuePercentUpsertBulk{
		create: govpcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GoodOrderValuePercent.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (govpcb *GoodOrderValuePercentCreateBulk) OnConflictColumns(columns ...string) *GoodOrderValuePercentUpsertBulk {
	govpcb.conflict = append(govpcb.conflict, sql.ConflictColumns(columns...))
	return &GoodOrderValuePercentUpsertBulk{
		create: govpcb,
	}
}

// GoodOrderValuePercentUpsertBulk is the builder for "upsert"-ing
// a bulk of GoodOrderValuePercent nodes.
type GoodOrderValuePercentUpsertBulk struct {
	create *GoodOrderValuePercentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.GoodOrderValuePercent.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(goodordervaluepercent.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *GoodOrderValuePercentUpsertBulk) UpdateNewValues() *GoodOrderValuePercentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(goodordervaluepercent.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GoodOrderValuePercent.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *GoodOrderValuePercentUpsertBulk) Ignore() *GoodOrderValuePercentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoodOrderValuePercentUpsertBulk) DoNothing() *GoodOrderValuePercentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoodOrderValuePercentCreateBulk.OnConflict
// documentation for more info.
func (u *GoodOrderValuePercentUpsertBulk) Update(set func(*GoodOrderValuePercentUpsert)) *GoodOrderValuePercentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoodOrderValuePercentUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *GoodOrderValuePercentUpsertBulk) SetCreatedAt(v uint32) *GoodOrderValuePercentUpsertBulk {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *GoodOrderValuePercentUpsertBulk) AddCreatedAt(v uint32) *GoodOrderValuePercentUpsertBulk {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GoodOrderValuePercentUpsertBulk) UpdateCreatedAt() *GoodOrderValuePercentUpsertBulk {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodOrderValuePercentUpsertBulk) SetUpdatedAt(v uint32) *GoodOrderValuePercentUpsertBulk {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *GoodOrderValuePercentUpsertBulk) AddUpdatedAt(v uint32) *GoodOrderValuePercentUpsertBulk {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodOrderValuePercentUpsertBulk) UpdateUpdatedAt() *GoodOrderValuePercentUpsertBulk {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GoodOrderValuePercentUpsertBulk) SetDeletedAt(v uint32) *GoodOrderValuePercentUpsertBulk {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *GoodOrderValuePercentUpsertBulk) AddDeletedAt(v uint32) *GoodOrderValuePercentUpsertBulk {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GoodOrderValuePercentUpsertBulk) UpdateDeletedAt() *GoodOrderValuePercentUpsertBulk {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *GoodOrderValuePercentUpsertBulk) SetAppID(v uuid.UUID) *GoodOrderValuePercentUpsertBulk {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *GoodOrderValuePercentUpsertBulk) UpdateAppID() *GoodOrderValuePercentUpsertBulk {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *GoodOrderValuePercentUpsertBulk) ClearAppID() *GoodOrderValuePercentUpsertBulk {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *GoodOrderValuePercentUpsertBulk) SetUserID(v uuid.UUID) *GoodOrderValuePercentUpsertBulk {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *GoodOrderValuePercentUpsertBulk) UpdateUserID() *GoodOrderValuePercentUpsertBulk {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *GoodOrderValuePercentUpsertBulk) ClearUserID() *GoodOrderValuePercentUpsertBulk {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.ClearUserID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *GoodOrderValuePercentUpsertBulk) SetGoodID(v uuid.UUID) *GoodOrderValuePercentUpsertBulk {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *GoodOrderValuePercentUpsertBulk) UpdateGoodID() *GoodOrderValuePercentUpsertBulk {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *GoodOrderValuePercentUpsertBulk) ClearGoodID() *GoodOrderValuePercentUpsertBulk {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.ClearGoodID()
	})
}

// SetPercent sets the "percent" field.
func (u *GoodOrderValuePercentUpsertBulk) SetPercent(v decimal.Decimal) *GoodOrderValuePercentUpsertBulk {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.SetPercent(v)
	})
}

// UpdatePercent sets the "percent" field to the value that was provided on create.
func (u *GoodOrderValuePercentUpsertBulk) UpdatePercent() *GoodOrderValuePercentUpsertBulk {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.UpdatePercent()
	})
}

// ClearPercent clears the value of the "percent" field.
func (u *GoodOrderValuePercentUpsertBulk) ClearPercent() *GoodOrderValuePercentUpsertBulk {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.ClearPercent()
	})
}

// SetStartAt sets the "start_at" field.
func (u *GoodOrderValuePercentUpsertBulk) SetStartAt(v uint32) *GoodOrderValuePercentUpsertBulk {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.SetStartAt(v)
	})
}

// AddStartAt adds v to the "start_at" field.
func (u *GoodOrderValuePercentUpsertBulk) AddStartAt(v uint32) *GoodOrderValuePercentUpsertBulk {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.AddStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *GoodOrderValuePercentUpsertBulk) UpdateStartAt() *GoodOrderValuePercentUpsertBulk {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *GoodOrderValuePercentUpsertBulk) ClearStartAt() *GoodOrderValuePercentUpsertBulk {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.ClearStartAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *GoodOrderValuePercentUpsertBulk) SetEndAt(v uint32) *GoodOrderValuePercentUpsertBulk {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.SetEndAt(v)
	})
}

// AddEndAt adds v to the "end_at" field.
func (u *GoodOrderValuePercentUpsertBulk) AddEndAt(v uint32) *GoodOrderValuePercentUpsertBulk {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.AddEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *GoodOrderValuePercentUpsertBulk) UpdateEndAt() *GoodOrderValuePercentUpsertBulk {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.UpdateEndAt()
	})
}

// ClearEndAt clears the value of the "end_at" field.
func (u *GoodOrderValuePercentUpsertBulk) ClearEndAt() *GoodOrderValuePercentUpsertBulk {
	return u.Update(func(s *GoodOrderValuePercentUpsert) {
		s.ClearEndAt()
	})
}

// Exec executes the query.
func (u *GoodOrderValuePercentUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the GoodOrderValuePercentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GoodOrderValuePercentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoodOrderValuePercentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
