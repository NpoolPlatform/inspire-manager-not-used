// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/NpoolPlatform/inspire-manager/pkg/db/ent/archivementdetail"
	"github.com/NpoolPlatform/inspire-manager/pkg/db/ent/archivementgeneral"
	"github.com/NpoolPlatform/inspire-manager/pkg/db/ent/couponallocated"
	"github.com/NpoolPlatform/inspire-manager/pkg/db/ent/coupondiscount"
	"github.com/NpoolPlatform/inspire-manager/pkg/db/ent/couponfixamount"
	"github.com/NpoolPlatform/inspire-manager/pkg/db/ent/couponspecialoffer"
	entevent "github.com/NpoolPlatform/inspire-manager/pkg/db/ent/event"
	"github.com/NpoolPlatform/inspire-manager/pkg/db/ent/goodorderpercent"
	"github.com/NpoolPlatform/inspire-manager/pkg/db/ent/goodordervaluepercent"
	"github.com/NpoolPlatform/inspire-manager/pkg/db/ent/invitationcode"
	"github.com/NpoolPlatform/inspire-manager/pkg/db/ent/registration"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 10)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   archivementdetail.Table,
			Columns: archivementdetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: archivementdetail.FieldID,
			},
		},
		Type: "ArchivementDetail",
		Fields: map[string]*sqlgraph.FieldSpec{
			archivementdetail.FieldCreatedAt:              {Type: field.TypeUint32, Column: archivementdetail.FieldCreatedAt},
			archivementdetail.FieldUpdatedAt:              {Type: field.TypeUint32, Column: archivementdetail.FieldUpdatedAt},
			archivementdetail.FieldDeletedAt:              {Type: field.TypeUint32, Column: archivementdetail.FieldDeletedAt},
			archivementdetail.FieldAppID:                  {Type: field.TypeUUID, Column: archivementdetail.FieldAppID},
			archivementdetail.FieldUserID:                 {Type: field.TypeUUID, Column: archivementdetail.FieldUserID},
			archivementdetail.FieldDirectContributorID:    {Type: field.TypeUUID, Column: archivementdetail.FieldDirectContributorID},
			archivementdetail.FieldGoodID:                 {Type: field.TypeUUID, Column: archivementdetail.FieldGoodID},
			archivementdetail.FieldOrderID:                {Type: field.TypeUUID, Column: archivementdetail.FieldOrderID},
			archivementdetail.FieldSelfOrder:              {Type: field.TypeBool, Column: archivementdetail.FieldSelfOrder},
			archivementdetail.FieldPaymentID:              {Type: field.TypeUUID, Column: archivementdetail.FieldPaymentID},
			archivementdetail.FieldCoinTypeID:             {Type: field.TypeUUID, Column: archivementdetail.FieldCoinTypeID},
			archivementdetail.FieldPaymentCoinTypeID:      {Type: field.TypeUUID, Column: archivementdetail.FieldPaymentCoinTypeID},
			archivementdetail.FieldPaymentCoinUsdCurrency: {Type: field.TypeOther, Column: archivementdetail.FieldPaymentCoinUsdCurrency},
			archivementdetail.FieldUnits:                  {Type: field.TypeUint32, Column: archivementdetail.FieldUnits},
			archivementdetail.FieldUnitsV1:                {Type: field.TypeOther, Column: archivementdetail.FieldUnitsV1},
			archivementdetail.FieldAmount:                 {Type: field.TypeOther, Column: archivementdetail.FieldAmount},
			archivementdetail.FieldUsdAmount:              {Type: field.TypeOther, Column: archivementdetail.FieldUsdAmount},
			archivementdetail.FieldCommission:             {Type: field.TypeOther, Column: archivementdetail.FieldCommission},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   archivementgeneral.Table,
			Columns: archivementgeneral.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: archivementgeneral.FieldID,
			},
		},
		Type: "ArchivementGeneral",
		Fields: map[string]*sqlgraph.FieldSpec{
			archivementgeneral.FieldCreatedAt:       {Type: field.TypeUint32, Column: archivementgeneral.FieldCreatedAt},
			archivementgeneral.FieldUpdatedAt:       {Type: field.TypeUint32, Column: archivementgeneral.FieldUpdatedAt},
			archivementgeneral.FieldDeletedAt:       {Type: field.TypeUint32, Column: archivementgeneral.FieldDeletedAt},
			archivementgeneral.FieldAppID:           {Type: field.TypeUUID, Column: archivementgeneral.FieldAppID},
			archivementgeneral.FieldUserID:          {Type: field.TypeUUID, Column: archivementgeneral.FieldUserID},
			archivementgeneral.FieldGoodID:          {Type: field.TypeUUID, Column: archivementgeneral.FieldGoodID},
			archivementgeneral.FieldCoinTypeID:      {Type: field.TypeUUID, Column: archivementgeneral.FieldCoinTypeID},
			archivementgeneral.FieldTotalUnits:      {Type: field.TypeUint32, Column: archivementgeneral.FieldTotalUnits},
			archivementgeneral.FieldTotalUnitsV1:    {Type: field.TypeOther, Column: archivementgeneral.FieldTotalUnitsV1},
			archivementgeneral.FieldSelfUnits:       {Type: field.TypeUint32, Column: archivementgeneral.FieldSelfUnits},
			archivementgeneral.FieldSelfUnitsV1:     {Type: field.TypeOther, Column: archivementgeneral.FieldSelfUnitsV1},
			archivementgeneral.FieldTotalAmount:     {Type: field.TypeOther, Column: archivementgeneral.FieldTotalAmount},
			archivementgeneral.FieldSelfAmount:      {Type: field.TypeOther, Column: archivementgeneral.FieldSelfAmount},
			archivementgeneral.FieldTotalCommission: {Type: field.TypeOther, Column: archivementgeneral.FieldTotalCommission},
			archivementgeneral.FieldSelfCommission:  {Type: field.TypeOther, Column: archivementgeneral.FieldSelfCommission},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   couponallocated.Table,
			Columns: couponallocated.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: couponallocated.FieldID,
			},
		},
		Type: "CouponAllocated",
		Fields: map[string]*sqlgraph.FieldSpec{
			couponallocated.FieldCreatedAt:     {Type: field.TypeUint32, Column: couponallocated.FieldCreatedAt},
			couponallocated.FieldUpdatedAt:     {Type: field.TypeUint32, Column: couponallocated.FieldUpdatedAt},
			couponallocated.FieldDeletedAt:     {Type: field.TypeUint32, Column: couponallocated.FieldDeletedAt},
			couponallocated.FieldAppID:         {Type: field.TypeUUID, Column: couponallocated.FieldAppID},
			couponallocated.FieldUserID:        {Type: field.TypeUUID, Column: couponallocated.FieldUserID},
			couponallocated.FieldCouponType:    {Type: field.TypeString, Column: couponallocated.FieldCouponType},
			couponallocated.FieldCouponID:      {Type: field.TypeUUID, Column: couponallocated.FieldCouponID},
			couponallocated.FieldValue:         {Type: field.TypeOther, Column: couponallocated.FieldValue},
			couponallocated.FieldUsed:          {Type: field.TypeBool, Column: couponallocated.FieldUsed},
			couponallocated.FieldUsedAt:        {Type: field.TypeUint32, Column: couponallocated.FieldUsedAt},
			couponallocated.FieldUsedByOrderID: {Type: field.TypeUUID, Column: couponallocated.FieldUsedByOrderID},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   coupondiscount.Table,
			Columns: coupondiscount.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: coupondiscount.FieldID,
			},
		},
		Type: "CouponDiscount",
		Fields: map[string]*sqlgraph.FieldSpec{
			coupondiscount.FieldCreatedAt:        {Type: field.TypeUint32, Column: coupondiscount.FieldCreatedAt},
			coupondiscount.FieldUpdatedAt:        {Type: field.TypeUint32, Column: coupondiscount.FieldUpdatedAt},
			coupondiscount.FieldDeletedAt:        {Type: field.TypeUint32, Column: coupondiscount.FieldDeletedAt},
			coupondiscount.FieldAppID:            {Type: field.TypeUUID, Column: coupondiscount.FieldAppID},
			coupondiscount.FieldDiscount:         {Type: field.TypeOther, Column: coupondiscount.FieldDiscount},
			coupondiscount.FieldCirculation:      {Type: field.TypeOther, Column: coupondiscount.FieldCirculation},
			coupondiscount.FieldReleasedByUserID: {Type: field.TypeUUID, Column: coupondiscount.FieldReleasedByUserID},
			coupondiscount.FieldStartAt:          {Type: field.TypeUint32, Column: coupondiscount.FieldStartAt},
			coupondiscount.FieldDurationDays:     {Type: field.TypeUint32, Column: coupondiscount.FieldDurationDays},
			coupondiscount.FieldMessage:          {Type: field.TypeString, Column: coupondiscount.FieldMessage},
			coupondiscount.FieldName:             {Type: field.TypeString, Column: coupondiscount.FieldName},
			coupondiscount.FieldAllocated:        {Type: field.TypeUint32, Column: coupondiscount.FieldAllocated},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   couponfixamount.Table,
			Columns: couponfixamount.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: couponfixamount.FieldID,
			},
		},
		Type: "CouponFixAmount",
		Fields: map[string]*sqlgraph.FieldSpec{
			couponfixamount.FieldCreatedAt:        {Type: field.TypeUint32, Column: couponfixamount.FieldCreatedAt},
			couponfixamount.FieldUpdatedAt:        {Type: field.TypeUint32, Column: couponfixamount.FieldUpdatedAt},
			couponfixamount.FieldDeletedAt:        {Type: field.TypeUint32, Column: couponfixamount.FieldDeletedAt},
			couponfixamount.FieldAppID:            {Type: field.TypeUUID, Column: couponfixamount.FieldAppID},
			couponfixamount.FieldDenomination:     {Type: field.TypeOther, Column: couponfixamount.FieldDenomination},
			couponfixamount.FieldCirculation:      {Type: field.TypeOther, Column: couponfixamount.FieldCirculation},
			couponfixamount.FieldReleasedByUserID: {Type: field.TypeUUID, Column: couponfixamount.FieldReleasedByUserID},
			couponfixamount.FieldStartAt:          {Type: field.TypeUint32, Column: couponfixamount.FieldStartAt},
			couponfixamount.FieldDurationDays:     {Type: field.TypeUint32, Column: couponfixamount.FieldDurationDays},
			couponfixamount.FieldMessage:          {Type: field.TypeString, Column: couponfixamount.FieldMessage},
			couponfixamount.FieldName:             {Type: field.TypeString, Column: couponfixamount.FieldName},
			couponfixamount.FieldAllocated:        {Type: field.TypeUint32, Column: couponfixamount.FieldAllocated},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   couponspecialoffer.Table,
			Columns: couponspecialoffer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: couponspecialoffer.FieldID,
			},
		},
		Type: "CouponSpecialOffer",
		Fields: map[string]*sqlgraph.FieldSpec{
			couponspecialoffer.FieldCreatedAt:        {Type: field.TypeUint32, Column: couponspecialoffer.FieldCreatedAt},
			couponspecialoffer.FieldUpdatedAt:        {Type: field.TypeUint32, Column: couponspecialoffer.FieldUpdatedAt},
			couponspecialoffer.FieldDeletedAt:        {Type: field.TypeUint32, Column: couponspecialoffer.FieldDeletedAt},
			couponspecialoffer.FieldAppID:            {Type: field.TypeUUID, Column: couponspecialoffer.FieldAppID},
			couponspecialoffer.FieldUserID:           {Type: field.TypeUUID, Column: couponspecialoffer.FieldUserID},
			couponspecialoffer.FieldAmount:           {Type: field.TypeOther, Column: couponspecialoffer.FieldAmount},
			couponspecialoffer.FieldReleasedByUserID: {Type: field.TypeUUID, Column: couponspecialoffer.FieldReleasedByUserID},
			couponspecialoffer.FieldStartAt:          {Type: field.TypeUint32, Column: couponspecialoffer.FieldStartAt},
			couponspecialoffer.FieldDurationDays:     {Type: field.TypeUint32, Column: couponspecialoffer.FieldDurationDays},
			couponspecialoffer.FieldMessage:          {Type: field.TypeString, Column: couponspecialoffer.FieldMessage},
		},
	}
	graph.Nodes[6] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   entevent.Table,
			Columns: entevent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: entevent.FieldID,
			},
		},
		Type: "Event",
		Fields: map[string]*sqlgraph.FieldSpec{
			entevent.FieldCreatedAt:      {Type: field.TypeUint32, Column: entevent.FieldCreatedAt},
			entevent.FieldUpdatedAt:      {Type: field.TypeUint32, Column: entevent.FieldUpdatedAt},
			entevent.FieldDeletedAt:      {Type: field.TypeUint32, Column: entevent.FieldDeletedAt},
			entevent.FieldAppID:          {Type: field.TypeUUID, Column: entevent.FieldAppID},
			entevent.FieldEventType:      {Type: field.TypeString, Column: entevent.FieldEventType},
			entevent.FieldCoupons:        {Type: field.TypeJSON, Column: entevent.FieldCoupons},
			entevent.FieldCredits:        {Type: field.TypeOther, Column: entevent.FieldCredits},
			entevent.FieldCreditsPerUsd:  {Type: field.TypeOther, Column: entevent.FieldCreditsPerUsd},
			entevent.FieldMaxConsecutive: {Type: field.TypeUint32, Column: entevent.FieldMaxConsecutive},
			entevent.FieldGoodID:         {Type: field.TypeUUID, Column: entevent.FieldGoodID},
			entevent.FieldInviterLayers:  {Type: field.TypeUint32, Column: entevent.FieldInviterLayers},
		},
	}
	graph.Nodes[7] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   goodorderpercent.Table,
			Columns: goodorderpercent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: goodorderpercent.FieldID,
			},
		},
		Type: "GoodOrderPercent",
		Fields: map[string]*sqlgraph.FieldSpec{
			goodorderpercent.FieldCreatedAt: {Type: field.TypeUint32, Column: goodorderpercent.FieldCreatedAt},
			goodorderpercent.FieldUpdatedAt: {Type: field.TypeUint32, Column: goodorderpercent.FieldUpdatedAt},
			goodorderpercent.FieldDeletedAt: {Type: field.TypeUint32, Column: goodorderpercent.FieldDeletedAt},
			goodorderpercent.FieldAppID:     {Type: field.TypeUUID, Column: goodorderpercent.FieldAppID},
			goodorderpercent.FieldUserID:    {Type: field.TypeUUID, Column: goodorderpercent.FieldUserID},
			goodorderpercent.FieldGoodID:    {Type: field.TypeUUID, Column: goodorderpercent.FieldGoodID},
			goodorderpercent.FieldPercent:   {Type: field.TypeOther, Column: goodorderpercent.FieldPercent},
			goodorderpercent.FieldStartAt:   {Type: field.TypeUint32, Column: goodorderpercent.FieldStartAt},
			goodorderpercent.FieldEndAt:     {Type: field.TypeUint32, Column: goodorderpercent.FieldEndAt},
		},
	}
	graph.Nodes[8] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   goodordervaluepercent.Table,
			Columns: goodordervaluepercent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: goodordervaluepercent.FieldID,
			},
		},
		Type: "GoodOrderValuePercent",
		Fields: map[string]*sqlgraph.FieldSpec{
			goodordervaluepercent.FieldCreatedAt: {Type: field.TypeUint32, Column: goodordervaluepercent.FieldCreatedAt},
			goodordervaluepercent.FieldUpdatedAt: {Type: field.TypeUint32, Column: goodordervaluepercent.FieldUpdatedAt},
			goodordervaluepercent.FieldDeletedAt: {Type: field.TypeUint32, Column: goodordervaluepercent.FieldDeletedAt},
			goodordervaluepercent.FieldAppID:     {Type: field.TypeUUID, Column: goodordervaluepercent.FieldAppID},
			goodordervaluepercent.FieldUserID:    {Type: field.TypeUUID, Column: goodordervaluepercent.FieldUserID},
			goodordervaluepercent.FieldGoodID:    {Type: field.TypeUUID, Column: goodordervaluepercent.FieldGoodID},
			goodordervaluepercent.FieldPercent:   {Type: field.TypeOther, Column: goodordervaluepercent.FieldPercent},
			goodordervaluepercent.FieldStartAt:   {Type: field.TypeUint32, Column: goodordervaluepercent.FieldStartAt},
			goodordervaluepercent.FieldEndAt:     {Type: field.TypeUint32, Column: goodordervaluepercent.FieldEndAt},
		},
	}
	graph.Nodes[8] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   invitationcode.Table,
			Columns: invitationcode.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: invitationcode.FieldID,
			},
		},
		Type: "InvitationCode",
		Fields: map[string]*sqlgraph.FieldSpec{
			invitationcode.FieldCreatedAt:      {Type: field.TypeUint32, Column: invitationcode.FieldCreatedAt},
			invitationcode.FieldUpdatedAt:      {Type: field.TypeUint32, Column: invitationcode.FieldUpdatedAt},
			invitationcode.FieldDeletedAt:      {Type: field.TypeUint32, Column: invitationcode.FieldDeletedAt},
			invitationcode.FieldAppID:          {Type: field.TypeUUID, Column: invitationcode.FieldAppID},
			invitationcode.FieldUserID:         {Type: field.TypeUUID, Column: invitationcode.FieldUserID},
			invitationcode.FieldInvitationCode: {Type: field.TypeString, Column: invitationcode.FieldInvitationCode},
			invitationcode.FieldDisabled:       {Type: field.TypeBool, Column: invitationcode.FieldDisabled},
		},
	}
	graph.Nodes[9] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   registration.Table,
			Columns: registration.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: registration.FieldID,
			},
		},
		Type: "Registration",
		Fields: map[string]*sqlgraph.FieldSpec{
			registration.FieldCreatedAt: {Type: field.TypeUint32, Column: registration.FieldCreatedAt},
			registration.FieldUpdatedAt: {Type: field.TypeUint32, Column: registration.FieldUpdatedAt},
			registration.FieldDeletedAt: {Type: field.TypeUint32, Column: registration.FieldDeletedAt},
			registration.FieldAppID:     {Type: field.TypeUUID, Column: registration.FieldAppID},
			registration.FieldInviterID: {Type: field.TypeUUID, Column: registration.FieldInviterID},
			registration.FieldInviteeID: {Type: field.TypeUUID, Column: registration.FieldInviteeID},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (adq *ArchivementDetailQuery) addPredicate(pred func(s *sql.Selector)) {
	adq.predicates = append(adq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ArchivementDetailQuery builder.
func (adq *ArchivementDetailQuery) Filter() *ArchivementDetailFilter {
	return &ArchivementDetailFilter{config: adq.config, predicateAdder: adq}
}

// addPredicate implements the predicateAdder interface.
func (m *ArchivementDetailMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ArchivementDetailMutation builder.
func (m *ArchivementDetailMutation) Filter() *ArchivementDetailFilter {
	return &ArchivementDetailFilter{config: m.config, predicateAdder: m}
}

// ArchivementDetailFilter provides a generic filtering capability at runtime for ArchivementDetailQuery.
type ArchivementDetailFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ArchivementDetailFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *ArchivementDetailFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(archivementdetail.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *ArchivementDetailFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(archivementdetail.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *ArchivementDetailFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(archivementdetail.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *ArchivementDetailFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(archivementdetail.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *ArchivementDetailFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(archivementdetail.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *ArchivementDetailFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(archivementdetail.FieldUserID))
}

// WhereDirectContributorID applies the entql [16]byte predicate on the direct_contributor_id field.
func (f *ArchivementDetailFilter) WhereDirectContributorID(p entql.ValueP) {
	f.Where(p.Field(archivementdetail.FieldDirectContributorID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *ArchivementDetailFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(archivementdetail.FieldGoodID))
}

// WhereOrderID applies the entql [16]byte predicate on the order_id field.
func (f *ArchivementDetailFilter) WhereOrderID(p entql.ValueP) {
	f.Where(p.Field(archivementdetail.FieldOrderID))
}

// WhereSelfOrder applies the entql bool predicate on the self_order field.
func (f *ArchivementDetailFilter) WhereSelfOrder(p entql.BoolP) {
	f.Where(p.Field(archivementdetail.FieldSelfOrder))
}

// WherePaymentID applies the entql [16]byte predicate on the payment_id field.
func (f *ArchivementDetailFilter) WherePaymentID(p entql.ValueP) {
	f.Where(p.Field(archivementdetail.FieldPaymentID))
}

// WhereCoinTypeID applies the entql [16]byte predicate on the coin_type_id field.
func (f *ArchivementDetailFilter) WhereCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(archivementdetail.FieldCoinTypeID))
}

// WherePaymentCoinTypeID applies the entql [16]byte predicate on the payment_coin_type_id field.
func (f *ArchivementDetailFilter) WherePaymentCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(archivementdetail.FieldPaymentCoinTypeID))
}

// WherePaymentCoinUsdCurrency applies the entql other predicate on the payment_coin_usd_currency field.
func (f *ArchivementDetailFilter) WherePaymentCoinUsdCurrency(p entql.OtherP) {
	f.Where(p.Field(archivementdetail.FieldPaymentCoinUsdCurrency))
}

// WhereUnits applies the entql uint32 predicate on the units field.
func (f *ArchivementDetailFilter) WhereUnits(p entql.Uint32P) {
	f.Where(p.Field(archivementdetail.FieldUnits))
}

// WhereUnitsV1 applies the entql other predicate on the units_v1 field.
func (f *ArchivementDetailFilter) WhereUnitsV1(p entql.OtherP) {
	f.Where(p.Field(archivementdetail.FieldUnitsV1))
}

// WhereAmount applies the entql other predicate on the amount field.
func (f *ArchivementDetailFilter) WhereAmount(p entql.OtherP) {
	f.Where(p.Field(archivementdetail.FieldAmount))
}

// WhereUsdAmount applies the entql other predicate on the usd_amount field.
func (f *ArchivementDetailFilter) WhereUsdAmount(p entql.OtherP) {
	f.Where(p.Field(archivementdetail.FieldUsdAmount))
}

// WhereCommission applies the entql other predicate on the commission field.
func (f *ArchivementDetailFilter) WhereCommission(p entql.OtherP) {
	f.Where(p.Field(archivementdetail.FieldCommission))
}

// addPredicate implements the predicateAdder interface.
func (agq *ArchivementGeneralQuery) addPredicate(pred func(s *sql.Selector)) {
	agq.predicates = append(agq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ArchivementGeneralQuery builder.
func (agq *ArchivementGeneralQuery) Filter() *ArchivementGeneralFilter {
	return &ArchivementGeneralFilter{config: agq.config, predicateAdder: agq}
}

// addPredicate implements the predicateAdder interface.
func (m *ArchivementGeneralMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ArchivementGeneralMutation builder.
func (m *ArchivementGeneralMutation) Filter() *ArchivementGeneralFilter {
	return &ArchivementGeneralFilter{config: m.config, predicateAdder: m}
}

// ArchivementGeneralFilter provides a generic filtering capability at runtime for ArchivementGeneralQuery.
type ArchivementGeneralFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ArchivementGeneralFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *ArchivementGeneralFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(archivementgeneral.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *ArchivementGeneralFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(archivementgeneral.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *ArchivementGeneralFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(archivementgeneral.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *ArchivementGeneralFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(archivementgeneral.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *ArchivementGeneralFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(archivementgeneral.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *ArchivementGeneralFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(archivementgeneral.FieldUserID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *ArchivementGeneralFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(archivementgeneral.FieldGoodID))
}

// WhereCoinTypeID applies the entql [16]byte predicate on the coin_type_id field.
func (f *ArchivementGeneralFilter) WhereCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(archivementgeneral.FieldCoinTypeID))
}

// WhereTotalUnits applies the entql uint32 predicate on the total_units field.
func (f *ArchivementGeneralFilter) WhereTotalUnits(p entql.Uint32P) {
	f.Where(p.Field(archivementgeneral.FieldTotalUnits))
}

// WhereTotalUnitsV1 applies the entql other predicate on the total_units_v1 field.
func (f *ArchivementGeneralFilter) WhereTotalUnitsV1(p entql.OtherP) {
	f.Where(p.Field(archivementgeneral.FieldTotalUnitsV1))
}

// WhereSelfUnits applies the entql uint32 predicate on the self_units field.
func (f *ArchivementGeneralFilter) WhereSelfUnits(p entql.Uint32P) {
	f.Where(p.Field(archivementgeneral.FieldSelfUnits))
}

// WhereSelfUnitsV1 applies the entql other predicate on the self_units_v1 field.
func (f *ArchivementGeneralFilter) WhereSelfUnitsV1(p entql.OtherP) {
	f.Where(p.Field(archivementgeneral.FieldSelfUnitsV1))
}

// WhereTotalAmount applies the entql other predicate on the total_amount field.
func (f *ArchivementGeneralFilter) WhereTotalAmount(p entql.OtherP) {
	f.Where(p.Field(archivementgeneral.FieldTotalAmount))
}

// WhereSelfAmount applies the entql other predicate on the self_amount field.
func (f *ArchivementGeneralFilter) WhereSelfAmount(p entql.OtherP) {
	f.Where(p.Field(archivementgeneral.FieldSelfAmount))
}

// WhereTotalCommission applies the entql other predicate on the total_commission field.
func (f *ArchivementGeneralFilter) WhereTotalCommission(p entql.OtherP) {
	f.Where(p.Field(archivementgeneral.FieldTotalCommission))
}

// WhereSelfCommission applies the entql other predicate on the self_commission field.
func (f *ArchivementGeneralFilter) WhereSelfCommission(p entql.OtherP) {
	f.Where(p.Field(archivementgeneral.FieldSelfCommission))
}

// addPredicate implements the predicateAdder interface.
func (caq *CouponAllocatedQuery) addPredicate(pred func(s *sql.Selector)) {
	caq.predicates = append(caq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CouponAllocatedQuery builder.
func (caq *CouponAllocatedQuery) Filter() *CouponAllocatedFilter {
	return &CouponAllocatedFilter{config: caq.config, predicateAdder: caq}
}

// addPredicate implements the predicateAdder interface.
func (m *CouponAllocatedMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CouponAllocatedMutation builder.
func (m *CouponAllocatedMutation) Filter() *CouponAllocatedFilter {
	return &CouponAllocatedFilter{config: m.config, predicateAdder: m}
}

// CouponAllocatedFilter provides a generic filtering capability at runtime for CouponAllocatedQuery.
type CouponAllocatedFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CouponAllocatedFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *CouponAllocatedFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(couponallocated.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *CouponAllocatedFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(couponallocated.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *CouponAllocatedFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(couponallocated.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *CouponAllocatedFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(couponallocated.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *CouponAllocatedFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(couponallocated.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *CouponAllocatedFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(couponallocated.FieldUserID))
}

// WhereCouponType applies the entql string predicate on the coupon_type field.
func (f *CouponAllocatedFilter) WhereCouponType(p entql.StringP) {
	f.Where(p.Field(couponallocated.FieldCouponType))
}

// WhereCouponID applies the entql [16]byte predicate on the coupon_id field.
func (f *CouponAllocatedFilter) WhereCouponID(p entql.ValueP) {
	f.Where(p.Field(couponallocated.FieldCouponID))
}

// WhereValue applies the entql other predicate on the value field.
func (f *CouponAllocatedFilter) WhereValue(p entql.OtherP) {
	f.Where(p.Field(couponallocated.FieldValue))
}

// WhereUsed applies the entql bool predicate on the used field.
func (f *CouponAllocatedFilter) WhereUsed(p entql.BoolP) {
	f.Where(p.Field(couponallocated.FieldUsed))
}

// WhereUsedAt applies the entql uint32 predicate on the used_at field.
func (f *CouponAllocatedFilter) WhereUsedAt(p entql.Uint32P) {
	f.Where(p.Field(couponallocated.FieldUsedAt))
}

// WhereUsedByOrderID applies the entql [16]byte predicate on the used_by_order_id field.
func (f *CouponAllocatedFilter) WhereUsedByOrderID(p entql.ValueP) {
	f.Where(p.Field(couponallocated.FieldUsedByOrderID))
}

// addPredicate implements the predicateAdder interface.
func (cdq *CouponDiscountQuery) addPredicate(pred func(s *sql.Selector)) {
	cdq.predicates = append(cdq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CouponDiscountQuery builder.
func (cdq *CouponDiscountQuery) Filter() *CouponDiscountFilter {
	return &CouponDiscountFilter{config: cdq.config, predicateAdder: cdq}
}

// addPredicate implements the predicateAdder interface.
func (m *CouponDiscountMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CouponDiscountMutation builder.
func (m *CouponDiscountMutation) Filter() *CouponDiscountFilter {
	return &CouponDiscountFilter{config: m.config, predicateAdder: m}
}

// CouponDiscountFilter provides a generic filtering capability at runtime for CouponDiscountQuery.
type CouponDiscountFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CouponDiscountFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *CouponDiscountFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(coupondiscount.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *CouponDiscountFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(coupondiscount.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *CouponDiscountFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(coupondiscount.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *CouponDiscountFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(coupondiscount.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *CouponDiscountFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(coupondiscount.FieldAppID))
}

// WhereDiscount applies the entql other predicate on the discount field.
func (f *CouponDiscountFilter) WhereDiscount(p entql.OtherP) {
	f.Where(p.Field(coupondiscount.FieldDiscount))
}

// WhereCirculation applies the entql other predicate on the circulation field.
func (f *CouponDiscountFilter) WhereCirculation(p entql.OtherP) {
	f.Where(p.Field(coupondiscount.FieldCirculation))
}

// WhereReleasedByUserID applies the entql [16]byte predicate on the released_by_user_id field.
func (f *CouponDiscountFilter) WhereReleasedByUserID(p entql.ValueP) {
	f.Where(p.Field(coupondiscount.FieldReleasedByUserID))
}

// WhereStartAt applies the entql uint32 predicate on the start_at field.
func (f *CouponDiscountFilter) WhereStartAt(p entql.Uint32P) {
	f.Where(p.Field(coupondiscount.FieldStartAt))
}

// WhereDurationDays applies the entql uint32 predicate on the duration_days field.
func (f *CouponDiscountFilter) WhereDurationDays(p entql.Uint32P) {
	f.Where(p.Field(coupondiscount.FieldDurationDays))
}

// WhereMessage applies the entql string predicate on the message field.
func (f *CouponDiscountFilter) WhereMessage(p entql.StringP) {
	f.Where(p.Field(coupondiscount.FieldMessage))
}

// WhereName applies the entql string predicate on the name field.
func (f *CouponDiscountFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(coupondiscount.FieldName))
}

// WhereAllocated applies the entql uint32 predicate on the allocated field.
func (f *CouponDiscountFilter) WhereAllocated(p entql.Uint32P) {
	f.Where(p.Field(coupondiscount.FieldAllocated))
}

// addPredicate implements the predicateAdder interface.
func (cfaq *CouponFixAmountQuery) addPredicate(pred func(s *sql.Selector)) {
	cfaq.predicates = append(cfaq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CouponFixAmountQuery builder.
func (cfaq *CouponFixAmountQuery) Filter() *CouponFixAmountFilter {
	return &CouponFixAmountFilter{config: cfaq.config, predicateAdder: cfaq}
}

// addPredicate implements the predicateAdder interface.
func (m *CouponFixAmountMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CouponFixAmountMutation builder.
func (m *CouponFixAmountMutation) Filter() *CouponFixAmountFilter {
	return &CouponFixAmountFilter{config: m.config, predicateAdder: m}
}

// CouponFixAmountFilter provides a generic filtering capability at runtime for CouponFixAmountQuery.
type CouponFixAmountFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CouponFixAmountFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *CouponFixAmountFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(couponfixamount.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *CouponFixAmountFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(couponfixamount.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *CouponFixAmountFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(couponfixamount.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *CouponFixAmountFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(couponfixamount.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *CouponFixAmountFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(couponfixamount.FieldAppID))
}

// WhereDenomination applies the entql other predicate on the denomination field.
func (f *CouponFixAmountFilter) WhereDenomination(p entql.OtherP) {
	f.Where(p.Field(couponfixamount.FieldDenomination))
}

// WhereCirculation applies the entql other predicate on the circulation field.
func (f *CouponFixAmountFilter) WhereCirculation(p entql.OtherP) {
	f.Where(p.Field(couponfixamount.FieldCirculation))
}

// WhereReleasedByUserID applies the entql [16]byte predicate on the released_by_user_id field.
func (f *CouponFixAmountFilter) WhereReleasedByUserID(p entql.ValueP) {
	f.Where(p.Field(couponfixamount.FieldReleasedByUserID))
}

// WhereStartAt applies the entql uint32 predicate on the start_at field.
func (f *CouponFixAmountFilter) WhereStartAt(p entql.Uint32P) {
	f.Where(p.Field(couponfixamount.FieldStartAt))
}

// WhereDurationDays applies the entql uint32 predicate on the duration_days field.
func (f *CouponFixAmountFilter) WhereDurationDays(p entql.Uint32P) {
	f.Where(p.Field(couponfixamount.FieldDurationDays))
}

// WhereMessage applies the entql string predicate on the message field.
func (f *CouponFixAmountFilter) WhereMessage(p entql.StringP) {
	f.Where(p.Field(couponfixamount.FieldMessage))
}

// WhereName applies the entql string predicate on the name field.
func (f *CouponFixAmountFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(couponfixamount.FieldName))
}

// WhereAllocated applies the entql uint32 predicate on the allocated field.
func (f *CouponFixAmountFilter) WhereAllocated(p entql.Uint32P) {
	f.Where(p.Field(couponfixamount.FieldAllocated))
}

// addPredicate implements the predicateAdder interface.
func (csoq *CouponSpecialOfferQuery) addPredicate(pred func(s *sql.Selector)) {
	csoq.predicates = append(csoq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CouponSpecialOfferQuery builder.
func (csoq *CouponSpecialOfferQuery) Filter() *CouponSpecialOfferFilter {
	return &CouponSpecialOfferFilter{config: csoq.config, predicateAdder: csoq}
}

// addPredicate implements the predicateAdder interface.
func (m *CouponSpecialOfferMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CouponSpecialOfferMutation builder.
func (m *CouponSpecialOfferMutation) Filter() *CouponSpecialOfferFilter {
	return &CouponSpecialOfferFilter{config: m.config, predicateAdder: m}
}

// CouponSpecialOfferFilter provides a generic filtering capability at runtime for CouponSpecialOfferQuery.
type CouponSpecialOfferFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CouponSpecialOfferFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *CouponSpecialOfferFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(couponspecialoffer.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *CouponSpecialOfferFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(couponspecialoffer.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *CouponSpecialOfferFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(couponspecialoffer.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *CouponSpecialOfferFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(couponspecialoffer.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *CouponSpecialOfferFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(couponspecialoffer.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *CouponSpecialOfferFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(couponspecialoffer.FieldUserID))
}

// WhereAmount applies the entql other predicate on the amount field.
func (f *CouponSpecialOfferFilter) WhereAmount(p entql.OtherP) {
	f.Where(p.Field(couponspecialoffer.FieldAmount))
}

// WhereReleasedByUserID applies the entql [16]byte predicate on the released_by_user_id field.
func (f *CouponSpecialOfferFilter) WhereReleasedByUserID(p entql.ValueP) {
	f.Where(p.Field(couponspecialoffer.FieldReleasedByUserID))
}

// WhereStartAt applies the entql uint32 predicate on the start_at field.
func (f *CouponSpecialOfferFilter) WhereStartAt(p entql.Uint32P) {
	f.Where(p.Field(couponspecialoffer.FieldStartAt))
}

// WhereDurationDays applies the entql uint32 predicate on the duration_days field.
func (f *CouponSpecialOfferFilter) WhereDurationDays(p entql.Uint32P) {
	f.Where(p.Field(couponspecialoffer.FieldDurationDays))
}

// WhereMessage applies the entql string predicate on the message field.
func (f *CouponSpecialOfferFilter) WhereMessage(p entql.StringP) {
	f.Where(p.Field(couponspecialoffer.FieldMessage))
}

// addPredicate implements the predicateAdder interface.
func (eq *EventQuery) addPredicate(pred func(s *sql.Selector)) {
	eq.predicates = append(eq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EventQuery builder.
func (eq *EventQuery) Filter() *EventFilter {
	return &EventFilter{config: eq.config, predicateAdder: eq}
}

// addPredicate implements the predicateAdder interface.
func (m *EventMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EventMutation builder.
func (m *EventMutation) Filter() *EventFilter {
	return &EventFilter{config: m.config, predicateAdder: m}
}

// EventFilter provides a generic filtering capability at runtime for EventQuery.
type EventFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EventFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[6].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *EventFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(entevent.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *EventFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(entevent.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *EventFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(entevent.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *EventFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(entevent.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *EventFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(entevent.FieldAppID))
}

// WhereEventType applies the entql string predicate on the event_type field.
func (f *EventFilter) WhereEventType(p entql.StringP) {
	f.Where(p.Field(entevent.FieldEventType))
}

// WhereCoupons applies the entql json.RawMessage predicate on the coupons field.
func (f *EventFilter) WhereCoupons(p entql.BytesP) {
	f.Where(p.Field(entevent.FieldCoupons))
}

// WhereCredits applies the entql other predicate on the credits field.
func (f *EventFilter) WhereCredits(p entql.OtherP) {
	f.Where(p.Field(entevent.FieldCredits))
}

// WhereCreditsPerUsd applies the entql other predicate on the credits_per_usd field.
func (f *EventFilter) WhereCreditsPerUsd(p entql.OtherP) {
	f.Where(p.Field(entevent.FieldCreditsPerUsd))
}

// WhereMaxConsecutive applies the entql uint32 predicate on the max_consecutive field.
func (f *EventFilter) WhereMaxConsecutive(p entql.Uint32P) {
	f.Where(p.Field(entevent.FieldMaxConsecutive))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *EventFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(entevent.FieldGoodID))
}

// WhereInviterLayers applies the entql uint32 predicate on the inviter_layers field.
func (f *EventFilter) WhereInviterLayers(p entql.Uint32P) {
	f.Where(p.Field(entevent.FieldInviterLayers))
}

// addPredicate implements the predicateAdder interface.
func (gopq *GoodOrderPercentQuery) addPredicate(pred func(s *sql.Selector)) {
	gopq.predicates = append(gopq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GoodOrderPercentQuery builder.
func (gopq *GoodOrderPercentQuery) Filter() *GoodOrderPercentFilter {
	return &GoodOrderPercentFilter{config: gopq.config, predicateAdder: gopq}
}

// addPredicate implements the predicateAdder interface.
func (m *GoodOrderPercentMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GoodOrderPercentMutation builder.
func (m *GoodOrderPercentMutation) Filter() *GoodOrderPercentFilter {
	return &GoodOrderPercentFilter{config: m.config, predicateAdder: m}
}

// GoodOrderPercentFilter provides a generic filtering capability at runtime for GoodOrderPercentQuery.
type GoodOrderPercentFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *GoodOrderPercentFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[7].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *GoodOrderPercentFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(goodorderpercent.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *GoodOrderPercentFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(goodorderpercent.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *GoodOrderPercentFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(goodorderpercent.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *GoodOrderPercentFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(goodorderpercent.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *GoodOrderPercentFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(goodorderpercent.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *GoodOrderPercentFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(goodorderpercent.FieldUserID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *GoodOrderPercentFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(goodorderpercent.FieldGoodID))
}

// WherePercent applies the entql other predicate on the percent field.
func (f *GoodOrderPercentFilter) WherePercent(p entql.OtherP) {
	f.Where(p.Field(goodorderpercent.FieldPercent))
}

// WhereStartAt applies the entql uint32 predicate on the start_at field.
func (f *GoodOrderPercentFilter) WhereStartAt(p entql.Uint32P) {
	f.Where(p.Field(goodorderpercent.FieldStartAt))
}

// WhereEndAt applies the entql uint32 predicate on the end_at field.
func (f *GoodOrderPercentFilter) WhereEndAt(p entql.Uint32P) {
	f.Where(p.Field(goodorderpercent.FieldEndAt))
}

// addPredicate implements the predicateAdder interface.
func (govpq *GoodOrderValuePercentQuery) addPredicate(pred func(s *sql.Selector)) {
	govpq.predicates = append(govpq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GoodOrderValuePercentQuery builder.
func (govpq *GoodOrderValuePercentQuery) Filter() *GoodOrderValuePercentFilter {
	return &GoodOrderValuePercentFilter{config: govpq.config, predicateAdder: govpq}
}

// addPredicate implements the predicateAdder interface.
func (m *GoodOrderValuePercentMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GoodOrderValuePercentMutation builder.
func (m *GoodOrderValuePercentMutation) Filter() *GoodOrderValuePercentFilter {
	return &GoodOrderValuePercentFilter{config: m.config, predicateAdder: m}
}

// GoodOrderValuePercentFilter provides a generic filtering capability at runtime for GoodOrderValuePercentQuery.
type GoodOrderValuePercentFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *GoodOrderValuePercentFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[7].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *GoodOrderValuePercentFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(goodordervaluepercent.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *GoodOrderValuePercentFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(goodordervaluepercent.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *GoodOrderValuePercentFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(goodordervaluepercent.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *GoodOrderValuePercentFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(goodordervaluepercent.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *GoodOrderValuePercentFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(goodordervaluepercent.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *GoodOrderValuePercentFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(goodordervaluepercent.FieldUserID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *GoodOrderValuePercentFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(goodordervaluepercent.FieldGoodID))
}

// WherePercent applies the entql other predicate on the percent field.
func (f *GoodOrderValuePercentFilter) WherePercent(p entql.OtherP) {
	f.Where(p.Field(goodordervaluepercent.FieldPercent))
}

// WhereStartAt applies the entql uint32 predicate on the start_at field.
func (f *GoodOrderValuePercentFilter) WhereStartAt(p entql.Uint32P) {
	f.Where(p.Field(goodordervaluepercent.FieldStartAt))
}

// WhereEndAt applies the entql uint32 predicate on the end_at field.
func (f *GoodOrderValuePercentFilter) WhereEndAt(p entql.Uint32P) {
	f.Where(p.Field(goodordervaluepercent.FieldEndAt))
}

// addPredicate implements the predicateAdder interface.
func (icq *InvitationCodeQuery) addPredicate(pred func(s *sql.Selector)) {
	icq.predicates = append(icq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the InvitationCodeQuery builder.
func (icq *InvitationCodeQuery) Filter() *InvitationCodeFilter {
	return &InvitationCodeFilter{config: icq.config, predicateAdder: icq}
}

// addPredicate implements the predicateAdder interface.
func (m *InvitationCodeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the InvitationCodeMutation builder.
func (m *InvitationCodeMutation) Filter() *InvitationCodeFilter {
	return &InvitationCodeFilter{config: m.config, predicateAdder: m}
}

// InvitationCodeFilter provides a generic filtering capability at runtime for InvitationCodeQuery.
type InvitationCodeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *InvitationCodeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[8].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *InvitationCodeFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(invitationcode.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *InvitationCodeFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(invitationcode.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *InvitationCodeFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(invitationcode.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *InvitationCodeFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(invitationcode.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *InvitationCodeFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(invitationcode.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *InvitationCodeFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(invitationcode.FieldUserID))
}

// WhereInvitationCode applies the entql string predicate on the invitation_code field.
func (f *InvitationCodeFilter) WhereInvitationCode(p entql.StringP) {
	f.Where(p.Field(invitationcode.FieldInvitationCode))
}

// WhereDisabled applies the entql bool predicate on the disabled field.
func (f *InvitationCodeFilter) WhereDisabled(p entql.BoolP) {
	f.Where(p.Field(invitationcode.FieldDisabled))
}

// addPredicate implements the predicateAdder interface.
func (rq *RegistrationQuery) addPredicate(pred func(s *sql.Selector)) {
	rq.predicates = append(rq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RegistrationQuery builder.
func (rq *RegistrationQuery) Filter() *RegistrationFilter {
	return &RegistrationFilter{config: rq.config, predicateAdder: rq}
}

// addPredicate implements the predicateAdder interface.
func (m *RegistrationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RegistrationMutation builder.
func (m *RegistrationMutation) Filter() *RegistrationFilter {
	return &RegistrationFilter{config: m.config, predicateAdder: m}
}

// RegistrationFilter provides a generic filtering capability at runtime for RegistrationQuery.
type RegistrationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RegistrationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[9].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *RegistrationFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(registration.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *RegistrationFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(registration.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *RegistrationFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(registration.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *RegistrationFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(registration.FieldDeletedAt))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *RegistrationFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(registration.FieldAppID))
}

// WhereInviterID applies the entql [16]byte predicate on the inviter_id field.
func (f *RegistrationFilter) WhereInviterID(p entql.ValueP) {
	f.Where(p.Field(registration.FieldInviterID))
}

// WhereInviteeID applies the entql [16]byte predicate on the invitee_id field.
func (f *RegistrationFilter) WhereInviteeID(p entql.ValueP) {
	f.Where(p.Field(registration.FieldInviteeID))
}
