// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/NpoolPlatform/inspire-manager/pkg/db/ent/migrate"
	"github.com/google/uuid"

	"github.com/NpoolPlatform/inspire-manager/pkg/db/ent/archivementdetail"
	"github.com/NpoolPlatform/inspire-manager/pkg/db/ent/archivementgeneral"
	"github.com/NpoolPlatform/inspire-manager/pkg/db/ent/couponallocated"
	"github.com/NpoolPlatform/inspire-manager/pkg/db/ent/coupondiscount"
	"github.com/NpoolPlatform/inspire-manager/pkg/db/ent/couponfixamount"
	"github.com/NpoolPlatform/inspire-manager/pkg/db/ent/couponspecialoffer"
	"github.com/NpoolPlatform/inspire-manager/pkg/db/ent/goodorderpercent"
	"github.com/NpoolPlatform/inspire-manager/pkg/db/ent/goodordervaluepercent"
	"github.com/NpoolPlatform/inspire-manager/pkg/db/ent/invitationcode"
	"github.com/NpoolPlatform/inspire-manager/pkg/db/ent/registration"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// ArchivementDetail is the client for interacting with the ArchivementDetail builders.
	ArchivementDetail *ArchivementDetailClient
	// ArchivementGeneral is the client for interacting with the ArchivementGeneral builders.
	ArchivementGeneral *ArchivementGeneralClient
	// CouponAllocated is the client for interacting with the CouponAllocated builders.
	CouponAllocated *CouponAllocatedClient
	// CouponDiscount is the client for interacting with the CouponDiscount builders.
	CouponDiscount *CouponDiscountClient
	// CouponFixAmount is the client for interacting with the CouponFixAmount builders.
	CouponFixAmount *CouponFixAmountClient
	// CouponSpecialOffer is the client for interacting with the CouponSpecialOffer builders.
	CouponSpecialOffer *CouponSpecialOfferClient
	// GoodOrderPercent is the client for interacting with the GoodOrderPercent builders.
	GoodOrderPercent *GoodOrderPercentClient
	// GoodOrderValuePercent is the client for interacting with the GoodOrderValuePercent builders.
	GoodOrderValuePercent *GoodOrderValuePercentClient
	// InvitationCode is the client for interacting with the InvitationCode builders.
	InvitationCode *InvitationCodeClient
	// Registration is the client for interacting with the Registration builders.
	Registration *RegistrationClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.ArchivementDetail = NewArchivementDetailClient(c.config)
	c.ArchivementGeneral = NewArchivementGeneralClient(c.config)
	c.CouponAllocated = NewCouponAllocatedClient(c.config)
	c.CouponDiscount = NewCouponDiscountClient(c.config)
	c.CouponFixAmount = NewCouponFixAmountClient(c.config)
	c.CouponSpecialOffer = NewCouponSpecialOfferClient(c.config)
	c.GoodOrderPercent = NewGoodOrderPercentClient(c.config)
	c.GoodOrderValuePercent = NewGoodOrderValuePercentClient(c.config)
	c.InvitationCode = NewInvitationCodeClient(c.config)
	c.Registration = NewRegistrationClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		ArchivementDetail:     NewArchivementDetailClient(cfg),
		ArchivementGeneral:    NewArchivementGeneralClient(cfg),
		CouponAllocated:       NewCouponAllocatedClient(cfg),
		CouponDiscount:        NewCouponDiscountClient(cfg),
		CouponFixAmount:       NewCouponFixAmountClient(cfg),
		CouponSpecialOffer:    NewCouponSpecialOfferClient(cfg),
		GoodOrderPercent:      NewGoodOrderPercentClient(cfg),
		GoodOrderValuePercent: NewGoodOrderValuePercentClient(cfg),
		InvitationCode:        NewInvitationCodeClient(cfg),
		Registration:          NewRegistrationClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		ArchivementDetail:     NewArchivementDetailClient(cfg),
		ArchivementGeneral:    NewArchivementGeneralClient(cfg),
		CouponAllocated:       NewCouponAllocatedClient(cfg),
		CouponDiscount:        NewCouponDiscountClient(cfg),
		CouponFixAmount:       NewCouponFixAmountClient(cfg),
		CouponSpecialOffer:    NewCouponSpecialOfferClient(cfg),
		GoodOrderPercent:      NewGoodOrderPercentClient(cfg),
		GoodOrderValuePercent: NewGoodOrderValuePercentClient(cfg),
		InvitationCode:        NewInvitationCodeClient(cfg),
		Registration:          NewRegistrationClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		ArchivementDetail.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.ArchivementDetail.Use(hooks...)
	c.ArchivementGeneral.Use(hooks...)
	c.CouponAllocated.Use(hooks...)
	c.CouponDiscount.Use(hooks...)
	c.CouponFixAmount.Use(hooks...)
	c.CouponSpecialOffer.Use(hooks...)
	c.GoodOrderPercent.Use(hooks...)
	c.GoodOrderValuePercent.Use(hooks...)
	c.InvitationCode.Use(hooks...)
	c.Registration.Use(hooks...)
}

// ArchivementDetailClient is a client for the ArchivementDetail schema.
type ArchivementDetailClient struct {
	config
}

// NewArchivementDetailClient returns a client for the ArchivementDetail from the given config.
func NewArchivementDetailClient(c config) *ArchivementDetailClient {
	return &ArchivementDetailClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `archivementdetail.Hooks(f(g(h())))`.
func (c *ArchivementDetailClient) Use(hooks ...Hook) {
	c.hooks.ArchivementDetail = append(c.hooks.ArchivementDetail, hooks...)
}

// Create returns a builder for creating a ArchivementDetail entity.
func (c *ArchivementDetailClient) Create() *ArchivementDetailCreate {
	mutation := newArchivementDetailMutation(c.config, OpCreate)
	return &ArchivementDetailCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ArchivementDetail entities.
func (c *ArchivementDetailClient) CreateBulk(builders ...*ArchivementDetailCreate) *ArchivementDetailCreateBulk {
	return &ArchivementDetailCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ArchivementDetail.
func (c *ArchivementDetailClient) Update() *ArchivementDetailUpdate {
	mutation := newArchivementDetailMutation(c.config, OpUpdate)
	return &ArchivementDetailUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ArchivementDetailClient) UpdateOne(ad *ArchivementDetail) *ArchivementDetailUpdateOne {
	mutation := newArchivementDetailMutation(c.config, OpUpdateOne, withArchivementDetail(ad))
	return &ArchivementDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ArchivementDetailClient) UpdateOneID(id uuid.UUID) *ArchivementDetailUpdateOne {
	mutation := newArchivementDetailMutation(c.config, OpUpdateOne, withArchivementDetailID(id))
	return &ArchivementDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ArchivementDetail.
func (c *ArchivementDetailClient) Delete() *ArchivementDetailDelete {
	mutation := newArchivementDetailMutation(c.config, OpDelete)
	return &ArchivementDetailDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ArchivementDetailClient) DeleteOne(ad *ArchivementDetail) *ArchivementDetailDeleteOne {
	return c.DeleteOneID(ad.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *ArchivementDetailClient) DeleteOneID(id uuid.UUID) *ArchivementDetailDeleteOne {
	builder := c.Delete().Where(archivementdetail.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ArchivementDetailDeleteOne{builder}
}

// Query returns a query builder for ArchivementDetail.
func (c *ArchivementDetailClient) Query() *ArchivementDetailQuery {
	return &ArchivementDetailQuery{
		config: c.config,
	}
}

// Get returns a ArchivementDetail entity by its id.
func (c *ArchivementDetailClient) Get(ctx context.Context, id uuid.UUID) (*ArchivementDetail, error) {
	return c.Query().Where(archivementdetail.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ArchivementDetailClient) GetX(ctx context.Context, id uuid.UUID) *ArchivementDetail {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ArchivementDetailClient) Hooks() []Hook {
	hooks := c.hooks.ArchivementDetail
	return append(hooks[:len(hooks):len(hooks)], archivementdetail.Hooks[:]...)
}

// ArchivementGeneralClient is a client for the ArchivementGeneral schema.
type ArchivementGeneralClient struct {
	config
}

// NewArchivementGeneralClient returns a client for the ArchivementGeneral from the given config.
func NewArchivementGeneralClient(c config) *ArchivementGeneralClient {
	return &ArchivementGeneralClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `archivementgeneral.Hooks(f(g(h())))`.
func (c *ArchivementGeneralClient) Use(hooks ...Hook) {
	c.hooks.ArchivementGeneral = append(c.hooks.ArchivementGeneral, hooks...)
}

// Create returns a builder for creating a ArchivementGeneral entity.
func (c *ArchivementGeneralClient) Create() *ArchivementGeneralCreate {
	mutation := newArchivementGeneralMutation(c.config, OpCreate)
	return &ArchivementGeneralCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ArchivementGeneral entities.
func (c *ArchivementGeneralClient) CreateBulk(builders ...*ArchivementGeneralCreate) *ArchivementGeneralCreateBulk {
	return &ArchivementGeneralCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ArchivementGeneral.
func (c *ArchivementGeneralClient) Update() *ArchivementGeneralUpdate {
	mutation := newArchivementGeneralMutation(c.config, OpUpdate)
	return &ArchivementGeneralUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ArchivementGeneralClient) UpdateOne(ag *ArchivementGeneral) *ArchivementGeneralUpdateOne {
	mutation := newArchivementGeneralMutation(c.config, OpUpdateOne, withArchivementGeneral(ag))
	return &ArchivementGeneralUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ArchivementGeneralClient) UpdateOneID(id uuid.UUID) *ArchivementGeneralUpdateOne {
	mutation := newArchivementGeneralMutation(c.config, OpUpdateOne, withArchivementGeneralID(id))
	return &ArchivementGeneralUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ArchivementGeneral.
func (c *ArchivementGeneralClient) Delete() *ArchivementGeneralDelete {
	mutation := newArchivementGeneralMutation(c.config, OpDelete)
	return &ArchivementGeneralDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ArchivementGeneralClient) DeleteOne(ag *ArchivementGeneral) *ArchivementGeneralDeleteOne {
	return c.DeleteOneID(ag.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *ArchivementGeneralClient) DeleteOneID(id uuid.UUID) *ArchivementGeneralDeleteOne {
	builder := c.Delete().Where(archivementgeneral.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ArchivementGeneralDeleteOne{builder}
}

// Query returns a query builder for ArchivementGeneral.
func (c *ArchivementGeneralClient) Query() *ArchivementGeneralQuery {
	return &ArchivementGeneralQuery{
		config: c.config,
	}
}

// Get returns a ArchivementGeneral entity by its id.
func (c *ArchivementGeneralClient) Get(ctx context.Context, id uuid.UUID) (*ArchivementGeneral, error) {
	return c.Query().Where(archivementgeneral.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ArchivementGeneralClient) GetX(ctx context.Context, id uuid.UUID) *ArchivementGeneral {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ArchivementGeneralClient) Hooks() []Hook {
	hooks := c.hooks.ArchivementGeneral
	return append(hooks[:len(hooks):len(hooks)], archivementgeneral.Hooks[:]...)
}

// CouponAllocatedClient is a client for the CouponAllocated schema.
type CouponAllocatedClient struct {
	config
}

// NewCouponAllocatedClient returns a client for the CouponAllocated from the given config.
func NewCouponAllocatedClient(c config) *CouponAllocatedClient {
	return &CouponAllocatedClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `couponallocated.Hooks(f(g(h())))`.
func (c *CouponAllocatedClient) Use(hooks ...Hook) {
	c.hooks.CouponAllocated = append(c.hooks.CouponAllocated, hooks...)
}

// Create returns a builder for creating a CouponAllocated entity.
func (c *CouponAllocatedClient) Create() *CouponAllocatedCreate {
	mutation := newCouponAllocatedMutation(c.config, OpCreate)
	return &CouponAllocatedCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CouponAllocated entities.
func (c *CouponAllocatedClient) CreateBulk(builders ...*CouponAllocatedCreate) *CouponAllocatedCreateBulk {
	return &CouponAllocatedCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CouponAllocated.
func (c *CouponAllocatedClient) Update() *CouponAllocatedUpdate {
	mutation := newCouponAllocatedMutation(c.config, OpUpdate)
	return &CouponAllocatedUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CouponAllocatedClient) UpdateOne(ca *CouponAllocated) *CouponAllocatedUpdateOne {
	mutation := newCouponAllocatedMutation(c.config, OpUpdateOne, withCouponAllocated(ca))
	return &CouponAllocatedUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CouponAllocatedClient) UpdateOneID(id uuid.UUID) *CouponAllocatedUpdateOne {
	mutation := newCouponAllocatedMutation(c.config, OpUpdateOne, withCouponAllocatedID(id))
	return &CouponAllocatedUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CouponAllocated.
func (c *CouponAllocatedClient) Delete() *CouponAllocatedDelete {
	mutation := newCouponAllocatedMutation(c.config, OpDelete)
	return &CouponAllocatedDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CouponAllocatedClient) DeleteOne(ca *CouponAllocated) *CouponAllocatedDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *CouponAllocatedClient) DeleteOneID(id uuid.UUID) *CouponAllocatedDeleteOne {
	builder := c.Delete().Where(couponallocated.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CouponAllocatedDeleteOne{builder}
}

// Query returns a query builder for CouponAllocated.
func (c *CouponAllocatedClient) Query() *CouponAllocatedQuery {
	return &CouponAllocatedQuery{
		config: c.config,
	}
}

// Get returns a CouponAllocated entity by its id.
func (c *CouponAllocatedClient) Get(ctx context.Context, id uuid.UUID) (*CouponAllocated, error) {
	return c.Query().Where(couponallocated.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CouponAllocatedClient) GetX(ctx context.Context, id uuid.UUID) *CouponAllocated {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CouponAllocatedClient) Hooks() []Hook {
	hooks := c.hooks.CouponAllocated
	return append(hooks[:len(hooks):len(hooks)], couponallocated.Hooks[:]...)
}

// CouponDiscountClient is a client for the CouponDiscount schema.
type CouponDiscountClient struct {
	config
}

// NewCouponDiscountClient returns a client for the CouponDiscount from the given config.
func NewCouponDiscountClient(c config) *CouponDiscountClient {
	return &CouponDiscountClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `coupondiscount.Hooks(f(g(h())))`.
func (c *CouponDiscountClient) Use(hooks ...Hook) {
	c.hooks.CouponDiscount = append(c.hooks.CouponDiscount, hooks...)
}

// Create returns a builder for creating a CouponDiscount entity.
func (c *CouponDiscountClient) Create() *CouponDiscountCreate {
	mutation := newCouponDiscountMutation(c.config, OpCreate)
	return &CouponDiscountCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CouponDiscount entities.
func (c *CouponDiscountClient) CreateBulk(builders ...*CouponDiscountCreate) *CouponDiscountCreateBulk {
	return &CouponDiscountCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CouponDiscount.
func (c *CouponDiscountClient) Update() *CouponDiscountUpdate {
	mutation := newCouponDiscountMutation(c.config, OpUpdate)
	return &CouponDiscountUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CouponDiscountClient) UpdateOne(cd *CouponDiscount) *CouponDiscountUpdateOne {
	mutation := newCouponDiscountMutation(c.config, OpUpdateOne, withCouponDiscount(cd))
	return &CouponDiscountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CouponDiscountClient) UpdateOneID(id uuid.UUID) *CouponDiscountUpdateOne {
	mutation := newCouponDiscountMutation(c.config, OpUpdateOne, withCouponDiscountID(id))
	return &CouponDiscountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CouponDiscount.
func (c *CouponDiscountClient) Delete() *CouponDiscountDelete {
	mutation := newCouponDiscountMutation(c.config, OpDelete)
	return &CouponDiscountDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CouponDiscountClient) DeleteOne(cd *CouponDiscount) *CouponDiscountDeleteOne {
	return c.DeleteOneID(cd.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *CouponDiscountClient) DeleteOneID(id uuid.UUID) *CouponDiscountDeleteOne {
	builder := c.Delete().Where(coupondiscount.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CouponDiscountDeleteOne{builder}
}

// Query returns a query builder for CouponDiscount.
func (c *CouponDiscountClient) Query() *CouponDiscountQuery {
	return &CouponDiscountQuery{
		config: c.config,
	}
}

// Get returns a CouponDiscount entity by its id.
func (c *CouponDiscountClient) Get(ctx context.Context, id uuid.UUID) (*CouponDiscount, error) {
	return c.Query().Where(coupondiscount.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CouponDiscountClient) GetX(ctx context.Context, id uuid.UUID) *CouponDiscount {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CouponDiscountClient) Hooks() []Hook {
	hooks := c.hooks.CouponDiscount
	return append(hooks[:len(hooks):len(hooks)], coupondiscount.Hooks[:]...)
}

// CouponFixAmountClient is a client for the CouponFixAmount schema.
type CouponFixAmountClient struct {
	config
}

// NewCouponFixAmountClient returns a client for the CouponFixAmount from the given config.
func NewCouponFixAmountClient(c config) *CouponFixAmountClient {
	return &CouponFixAmountClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `couponfixamount.Hooks(f(g(h())))`.
func (c *CouponFixAmountClient) Use(hooks ...Hook) {
	c.hooks.CouponFixAmount = append(c.hooks.CouponFixAmount, hooks...)
}

// Create returns a builder for creating a CouponFixAmount entity.
func (c *CouponFixAmountClient) Create() *CouponFixAmountCreate {
	mutation := newCouponFixAmountMutation(c.config, OpCreate)
	return &CouponFixAmountCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CouponFixAmount entities.
func (c *CouponFixAmountClient) CreateBulk(builders ...*CouponFixAmountCreate) *CouponFixAmountCreateBulk {
	return &CouponFixAmountCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CouponFixAmount.
func (c *CouponFixAmountClient) Update() *CouponFixAmountUpdate {
	mutation := newCouponFixAmountMutation(c.config, OpUpdate)
	return &CouponFixAmountUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CouponFixAmountClient) UpdateOne(cfa *CouponFixAmount) *CouponFixAmountUpdateOne {
	mutation := newCouponFixAmountMutation(c.config, OpUpdateOne, withCouponFixAmount(cfa))
	return &CouponFixAmountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CouponFixAmountClient) UpdateOneID(id uuid.UUID) *CouponFixAmountUpdateOne {
	mutation := newCouponFixAmountMutation(c.config, OpUpdateOne, withCouponFixAmountID(id))
	return &CouponFixAmountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CouponFixAmount.
func (c *CouponFixAmountClient) Delete() *CouponFixAmountDelete {
	mutation := newCouponFixAmountMutation(c.config, OpDelete)
	return &CouponFixAmountDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CouponFixAmountClient) DeleteOne(cfa *CouponFixAmount) *CouponFixAmountDeleteOne {
	return c.DeleteOneID(cfa.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *CouponFixAmountClient) DeleteOneID(id uuid.UUID) *CouponFixAmountDeleteOne {
	builder := c.Delete().Where(couponfixamount.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CouponFixAmountDeleteOne{builder}
}

// Query returns a query builder for CouponFixAmount.
func (c *CouponFixAmountClient) Query() *CouponFixAmountQuery {
	return &CouponFixAmountQuery{
		config: c.config,
	}
}

// Get returns a CouponFixAmount entity by its id.
func (c *CouponFixAmountClient) Get(ctx context.Context, id uuid.UUID) (*CouponFixAmount, error) {
	return c.Query().Where(couponfixamount.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CouponFixAmountClient) GetX(ctx context.Context, id uuid.UUID) *CouponFixAmount {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CouponFixAmountClient) Hooks() []Hook {
	hooks := c.hooks.CouponFixAmount
	return append(hooks[:len(hooks):len(hooks)], couponfixamount.Hooks[:]...)
}

// CouponSpecialOfferClient is a client for the CouponSpecialOffer schema.
type CouponSpecialOfferClient struct {
	config
}

// NewCouponSpecialOfferClient returns a client for the CouponSpecialOffer from the given config.
func NewCouponSpecialOfferClient(c config) *CouponSpecialOfferClient {
	return &CouponSpecialOfferClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `couponspecialoffer.Hooks(f(g(h())))`.
func (c *CouponSpecialOfferClient) Use(hooks ...Hook) {
	c.hooks.CouponSpecialOffer = append(c.hooks.CouponSpecialOffer, hooks...)
}

// Create returns a builder for creating a CouponSpecialOffer entity.
func (c *CouponSpecialOfferClient) Create() *CouponSpecialOfferCreate {
	mutation := newCouponSpecialOfferMutation(c.config, OpCreate)
	return &CouponSpecialOfferCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CouponSpecialOffer entities.
func (c *CouponSpecialOfferClient) CreateBulk(builders ...*CouponSpecialOfferCreate) *CouponSpecialOfferCreateBulk {
	return &CouponSpecialOfferCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CouponSpecialOffer.
func (c *CouponSpecialOfferClient) Update() *CouponSpecialOfferUpdate {
	mutation := newCouponSpecialOfferMutation(c.config, OpUpdate)
	return &CouponSpecialOfferUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CouponSpecialOfferClient) UpdateOne(cso *CouponSpecialOffer) *CouponSpecialOfferUpdateOne {
	mutation := newCouponSpecialOfferMutation(c.config, OpUpdateOne, withCouponSpecialOffer(cso))
	return &CouponSpecialOfferUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CouponSpecialOfferClient) UpdateOneID(id uuid.UUID) *CouponSpecialOfferUpdateOne {
	mutation := newCouponSpecialOfferMutation(c.config, OpUpdateOne, withCouponSpecialOfferID(id))
	return &CouponSpecialOfferUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CouponSpecialOffer.
func (c *CouponSpecialOfferClient) Delete() *CouponSpecialOfferDelete {
	mutation := newCouponSpecialOfferMutation(c.config, OpDelete)
	return &CouponSpecialOfferDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CouponSpecialOfferClient) DeleteOne(cso *CouponSpecialOffer) *CouponSpecialOfferDeleteOne {
	return c.DeleteOneID(cso.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *CouponSpecialOfferClient) DeleteOneID(id uuid.UUID) *CouponSpecialOfferDeleteOne {
	builder := c.Delete().Where(couponspecialoffer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CouponSpecialOfferDeleteOne{builder}
}

// Query returns a query builder for CouponSpecialOffer.
func (c *CouponSpecialOfferClient) Query() *CouponSpecialOfferQuery {
	return &CouponSpecialOfferQuery{
		config: c.config,
	}
}

// Get returns a CouponSpecialOffer entity by its id.
func (c *CouponSpecialOfferClient) Get(ctx context.Context, id uuid.UUID) (*CouponSpecialOffer, error) {
	return c.Query().Where(couponspecialoffer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CouponSpecialOfferClient) GetX(ctx context.Context, id uuid.UUID) *CouponSpecialOffer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CouponSpecialOfferClient) Hooks() []Hook {
	hooks := c.hooks.CouponSpecialOffer
	return append(hooks[:len(hooks):len(hooks)], couponspecialoffer.Hooks[:]...)
}

// GoodOrderPercentClient is a client for the GoodOrderPercent schema.
type GoodOrderPercentClient struct {
	config
}

// NewGoodOrderPercentClient returns a client for the GoodOrderPercent from the given config.
func NewGoodOrderPercentClient(c config) *GoodOrderPercentClient {
	return &GoodOrderPercentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `goodorderpercent.Hooks(f(g(h())))`.
func (c *GoodOrderPercentClient) Use(hooks ...Hook) {
	c.hooks.GoodOrderPercent = append(c.hooks.GoodOrderPercent, hooks...)
}

// Create returns a builder for creating a GoodOrderPercent entity.
func (c *GoodOrderPercentClient) Create() *GoodOrderPercentCreate {
	mutation := newGoodOrderPercentMutation(c.config, OpCreate)
	return &GoodOrderPercentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GoodOrderPercent entities.
func (c *GoodOrderPercentClient) CreateBulk(builders ...*GoodOrderPercentCreate) *GoodOrderPercentCreateBulk {
	return &GoodOrderPercentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GoodOrderPercent.
func (c *GoodOrderPercentClient) Update() *GoodOrderPercentUpdate {
	mutation := newGoodOrderPercentMutation(c.config, OpUpdate)
	return &GoodOrderPercentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GoodOrderPercentClient) UpdateOne(gop *GoodOrderPercent) *GoodOrderPercentUpdateOne {
	mutation := newGoodOrderPercentMutation(c.config, OpUpdateOne, withGoodOrderPercent(gop))
	return &GoodOrderPercentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GoodOrderPercentClient) UpdateOneID(id uuid.UUID) *GoodOrderPercentUpdateOne {
	mutation := newGoodOrderPercentMutation(c.config, OpUpdateOne, withGoodOrderPercentID(id))
	return &GoodOrderPercentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GoodOrderPercent.
func (c *GoodOrderPercentClient) Delete() *GoodOrderPercentDelete {
	mutation := newGoodOrderPercentMutation(c.config, OpDelete)
	return &GoodOrderPercentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GoodOrderPercentClient) DeleteOne(gop *GoodOrderPercent) *GoodOrderPercentDeleteOne {
	return c.DeleteOneID(gop.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *GoodOrderPercentClient) DeleteOneID(id uuid.UUID) *GoodOrderPercentDeleteOne {
	builder := c.Delete().Where(goodorderpercent.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GoodOrderPercentDeleteOne{builder}
}

// Query returns a query builder for GoodOrderPercent.
func (c *GoodOrderPercentClient) Query() *GoodOrderPercentQuery {
	return &GoodOrderPercentQuery{
		config: c.config,
	}
}

// Get returns a GoodOrderPercent entity by its id.
func (c *GoodOrderPercentClient) Get(ctx context.Context, id uuid.UUID) (*GoodOrderPercent, error) {
	return c.Query().Where(goodorderpercent.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GoodOrderPercentClient) GetX(ctx context.Context, id uuid.UUID) *GoodOrderPercent {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GoodOrderPercentClient) Hooks() []Hook {
	hooks := c.hooks.GoodOrderPercent
	return append(hooks[:len(hooks):len(hooks)], goodorderpercent.Hooks[:]...)
}

// GoodOrderValuePercentClient is a client for the GoodOrderValuePercent schema.
type GoodOrderValuePercentClient struct {
	config
}

// NewGoodOrderValuePercentClient returns a client for the GoodOrderValuePercent from the given config.
func NewGoodOrderValuePercentClient(c config) *GoodOrderValuePercentClient {
	return &GoodOrderValuePercentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `goodordervaluepercent.Hooks(f(g(h())))`.
func (c *GoodOrderValuePercentClient) Use(hooks ...Hook) {
	c.hooks.GoodOrderValuePercent = append(c.hooks.GoodOrderValuePercent, hooks...)
}

// Create returns a builder for creating a GoodOrderValuePercent entity.
func (c *GoodOrderValuePercentClient) Create() *GoodOrderValuePercentCreate {
	mutation := newGoodOrderValuePercentMutation(c.config, OpCreate)
	return &GoodOrderValuePercentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GoodOrderValuePercent entities.
func (c *GoodOrderValuePercentClient) CreateBulk(builders ...*GoodOrderValuePercentCreate) *GoodOrderValuePercentCreateBulk {
	return &GoodOrderValuePercentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GoodOrderValuePercent.
func (c *GoodOrderValuePercentClient) Update() *GoodOrderValuePercentUpdate {
	mutation := newGoodOrderValuePercentMutation(c.config, OpUpdate)
	return &GoodOrderValuePercentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GoodOrderValuePercentClient) UpdateOne(govp *GoodOrderValuePercent) *GoodOrderValuePercentUpdateOne {
	mutation := newGoodOrderValuePercentMutation(c.config, OpUpdateOne, withGoodOrderValuePercent(govp))
	return &GoodOrderValuePercentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GoodOrderValuePercentClient) UpdateOneID(id uuid.UUID) *GoodOrderValuePercentUpdateOne {
	mutation := newGoodOrderValuePercentMutation(c.config, OpUpdateOne, withGoodOrderValuePercentID(id))
	return &GoodOrderValuePercentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GoodOrderValuePercent.
func (c *GoodOrderValuePercentClient) Delete() *GoodOrderValuePercentDelete {
	mutation := newGoodOrderValuePercentMutation(c.config, OpDelete)
	return &GoodOrderValuePercentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GoodOrderValuePercentClient) DeleteOne(govp *GoodOrderValuePercent) *GoodOrderValuePercentDeleteOne {
	return c.DeleteOneID(govp.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *GoodOrderValuePercentClient) DeleteOneID(id uuid.UUID) *GoodOrderValuePercentDeleteOne {
	builder := c.Delete().Where(goodordervaluepercent.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GoodOrderValuePercentDeleteOne{builder}
}

// Query returns a query builder for GoodOrderValuePercent.
func (c *GoodOrderValuePercentClient) Query() *GoodOrderValuePercentQuery {
	return &GoodOrderValuePercentQuery{
		config: c.config,
	}
}

// Get returns a GoodOrderValuePercent entity by its id.
func (c *GoodOrderValuePercentClient) Get(ctx context.Context, id uuid.UUID) (*GoodOrderValuePercent, error) {
	return c.Query().Where(goodordervaluepercent.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GoodOrderValuePercentClient) GetX(ctx context.Context, id uuid.UUID) *GoodOrderValuePercent {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GoodOrderValuePercentClient) Hooks() []Hook {
	hooks := c.hooks.GoodOrderValuePercent
	return append(hooks[:len(hooks):len(hooks)], goodordervaluepercent.Hooks[:]...)
}

// InvitationCodeClient is a client for the InvitationCode schema.
type InvitationCodeClient struct {
	config
}

// NewInvitationCodeClient returns a client for the InvitationCode from the given config.
func NewInvitationCodeClient(c config) *InvitationCodeClient {
	return &InvitationCodeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `invitationcode.Hooks(f(g(h())))`.
func (c *InvitationCodeClient) Use(hooks ...Hook) {
	c.hooks.InvitationCode = append(c.hooks.InvitationCode, hooks...)
}

// Create returns a builder for creating a InvitationCode entity.
func (c *InvitationCodeClient) Create() *InvitationCodeCreate {
	mutation := newInvitationCodeMutation(c.config, OpCreate)
	return &InvitationCodeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of InvitationCode entities.
func (c *InvitationCodeClient) CreateBulk(builders ...*InvitationCodeCreate) *InvitationCodeCreateBulk {
	return &InvitationCodeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for InvitationCode.
func (c *InvitationCodeClient) Update() *InvitationCodeUpdate {
	mutation := newInvitationCodeMutation(c.config, OpUpdate)
	return &InvitationCodeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InvitationCodeClient) UpdateOne(ic *InvitationCode) *InvitationCodeUpdateOne {
	mutation := newInvitationCodeMutation(c.config, OpUpdateOne, withInvitationCode(ic))
	return &InvitationCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InvitationCodeClient) UpdateOneID(id uuid.UUID) *InvitationCodeUpdateOne {
	mutation := newInvitationCodeMutation(c.config, OpUpdateOne, withInvitationCodeID(id))
	return &InvitationCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for InvitationCode.
func (c *InvitationCodeClient) Delete() *InvitationCodeDelete {
	mutation := newInvitationCodeMutation(c.config, OpDelete)
	return &InvitationCodeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InvitationCodeClient) DeleteOne(ic *InvitationCode) *InvitationCodeDeleteOne {
	return c.DeleteOneID(ic.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *InvitationCodeClient) DeleteOneID(id uuid.UUID) *InvitationCodeDeleteOne {
	builder := c.Delete().Where(invitationcode.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InvitationCodeDeleteOne{builder}
}

// Query returns a query builder for InvitationCode.
func (c *InvitationCodeClient) Query() *InvitationCodeQuery {
	return &InvitationCodeQuery{
		config: c.config,
	}
}

// Get returns a InvitationCode entity by its id.
func (c *InvitationCodeClient) Get(ctx context.Context, id uuid.UUID) (*InvitationCode, error) {
	return c.Query().Where(invitationcode.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InvitationCodeClient) GetX(ctx context.Context, id uuid.UUID) *InvitationCode {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *InvitationCodeClient) Hooks() []Hook {
	hooks := c.hooks.InvitationCode
	return append(hooks[:len(hooks):len(hooks)], invitationcode.Hooks[:]...)
}

// RegistrationClient is a client for the Registration schema.
type RegistrationClient struct {
	config
}

// NewRegistrationClient returns a client for the Registration from the given config.
func NewRegistrationClient(c config) *RegistrationClient {
	return &RegistrationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `registration.Hooks(f(g(h())))`.
func (c *RegistrationClient) Use(hooks ...Hook) {
	c.hooks.Registration = append(c.hooks.Registration, hooks...)
}

// Create returns a builder for creating a Registration entity.
func (c *RegistrationClient) Create() *RegistrationCreate {
	mutation := newRegistrationMutation(c.config, OpCreate)
	return &RegistrationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Registration entities.
func (c *RegistrationClient) CreateBulk(builders ...*RegistrationCreate) *RegistrationCreateBulk {
	return &RegistrationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Registration.
func (c *RegistrationClient) Update() *RegistrationUpdate {
	mutation := newRegistrationMutation(c.config, OpUpdate)
	return &RegistrationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RegistrationClient) UpdateOne(r *Registration) *RegistrationUpdateOne {
	mutation := newRegistrationMutation(c.config, OpUpdateOne, withRegistration(r))
	return &RegistrationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RegistrationClient) UpdateOneID(id uuid.UUID) *RegistrationUpdateOne {
	mutation := newRegistrationMutation(c.config, OpUpdateOne, withRegistrationID(id))
	return &RegistrationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Registration.
func (c *RegistrationClient) Delete() *RegistrationDelete {
	mutation := newRegistrationMutation(c.config, OpDelete)
	return &RegistrationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RegistrationClient) DeleteOne(r *Registration) *RegistrationDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *RegistrationClient) DeleteOneID(id uuid.UUID) *RegistrationDeleteOne {
	builder := c.Delete().Where(registration.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RegistrationDeleteOne{builder}
}

// Query returns a query builder for Registration.
func (c *RegistrationClient) Query() *RegistrationQuery {
	return &RegistrationQuery{
		config: c.config,
	}
}

// Get returns a Registration entity by its id.
func (c *RegistrationClient) Get(ctx context.Context, id uuid.UUID) (*Registration, error) {
	return c.Query().Where(registration.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RegistrationClient) GetX(ctx context.Context, id uuid.UUID) *Registration {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *RegistrationClient) Hooks() []Hook {
	hooks := c.hooks.Registration
	return append(hooks[:len(hooks):len(hooks)], registration.Hooks[:]...)
}
